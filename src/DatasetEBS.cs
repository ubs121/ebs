//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EBS {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DatasetEBS : DataSet {
        
        private RegionDataTable tableRegion;
        
        private Ebs06DataTable tableEbs06;
        
        private Ebs08DataTable tableEbs08;
        
        private Ebs01DataTable tableEbs01;
        
        private Ebs02DataTable tableEbs02;
        
        private Ebs10DataTable tableEbs10;
        
        private Ebs07aDataTable tableEbs07a;
        
        private Ebs09DataTable tableEbs09;
        
        private Ebs07DataTable tableEbs07;
        
        private Ebs13DataTable tableEbs13;
        
        private Ebs03DataTable tableEbs03;
        
        private Ebs05DataTable tableEbs05;
        
        private Ebs14DataTable tableEbs14;
        
        private Ebs15DataTable tableEbs15;
        
        private DescriptionDataTable tableDescription;
        
        private Ebs11DataTable tableEbs11;
        
        private SchoolDataTable tableSchool;
        
        private TeacherDataTable tableTeacher;
        
        private BuildingDataTable tableBuilding;
        
        private EquipmentDataTable tableEquipment;
        
        private HusbandryDataTable tableHusbandry;
        
        private EbsIndDataTable tableEbsInd;
        
        public DatasetEBS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DatasetEBS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Region"] != null)) {
                    this.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
                }
                if ((ds.Tables["Ebs06"] != null)) {
                    this.Tables.Add(new Ebs06DataTable(ds.Tables["Ebs06"]));
                }
                if ((ds.Tables["Ebs08"] != null)) {
                    this.Tables.Add(new Ebs08DataTable(ds.Tables["Ebs08"]));
                }
                if ((ds.Tables["Ebs01"] != null)) {
                    this.Tables.Add(new Ebs01DataTable(ds.Tables["Ebs01"]));
                }
                if ((ds.Tables["Ebs02"] != null)) {
                    this.Tables.Add(new Ebs02DataTable(ds.Tables["Ebs02"]));
                }
                if ((ds.Tables["Ebs10"] != null)) {
                    this.Tables.Add(new Ebs10DataTable(ds.Tables["Ebs10"]));
                }
                if ((ds.Tables["Ebs07a"] != null)) {
                    this.Tables.Add(new Ebs07aDataTable(ds.Tables["Ebs07a"]));
                }
                if ((ds.Tables["Ebs09"] != null)) {
                    this.Tables.Add(new Ebs09DataTable(ds.Tables["Ebs09"]));
                }
                if ((ds.Tables["Ebs07"] != null)) {
                    this.Tables.Add(new Ebs07DataTable(ds.Tables["Ebs07"]));
                }
                if ((ds.Tables["Ebs13"] != null)) {
                    this.Tables.Add(new Ebs13DataTable(ds.Tables["Ebs13"]));
                }
                if ((ds.Tables["Ebs03"] != null)) {
                    this.Tables.Add(new Ebs03DataTable(ds.Tables["Ebs03"]));
                }
                if ((ds.Tables["Ebs05"] != null)) {
                    this.Tables.Add(new Ebs05DataTable(ds.Tables["Ebs05"]));
                }
                if ((ds.Tables["Ebs14"] != null)) {
                    this.Tables.Add(new Ebs14DataTable(ds.Tables["Ebs14"]));
                }
                if ((ds.Tables["Ebs15"] != null)) {
                    this.Tables.Add(new Ebs15DataTable(ds.Tables["Ebs15"]));
                }
                if ((ds.Tables["Description"] != null)) {
                    this.Tables.Add(new DescriptionDataTable(ds.Tables["Description"]));
                }
                if ((ds.Tables["Ebs11"] != null)) {
                    this.Tables.Add(new Ebs11DataTable(ds.Tables["Ebs11"]));
                }
                if ((ds.Tables["School"] != null)) {
                    this.Tables.Add(new SchoolDataTable(ds.Tables["School"]));
                }
                if ((ds.Tables["Teacher"] != null)) {
                    this.Tables.Add(new TeacherDataTable(ds.Tables["Teacher"]));
                }
                if ((ds.Tables["Building"] != null)) {
                    this.Tables.Add(new BuildingDataTable(ds.Tables["Building"]));
                }
                if ((ds.Tables["Equipment"] != null)) {
                    this.Tables.Add(new EquipmentDataTable(ds.Tables["Equipment"]));
                }
                if ((ds.Tables["Husbandry"] != null)) {
                    this.Tables.Add(new HusbandryDataTable(ds.Tables["Husbandry"]));
                }
                if ((ds.Tables["EbsInd"] != null)) {
                    this.Tables.Add(new EbsIndDataTable(ds.Tables["EbsInd"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegionDataTable Region {
            get {
                return this.tableRegion;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs06DataTable Ebs06 {
            get {
                return this.tableEbs06;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs08DataTable Ebs08 {
            get {
                return this.tableEbs08;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs01DataTable Ebs01 {
            get {
                return this.tableEbs01;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs02DataTable Ebs02 {
            get {
                return this.tableEbs02;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs10DataTable Ebs10 {
            get {
                return this.tableEbs10;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs07aDataTable Ebs07a {
            get {
                return this.tableEbs07a;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs09DataTable Ebs09 {
            get {
                return this.tableEbs09;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs07DataTable Ebs07 {
            get {
                return this.tableEbs07;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs13DataTable Ebs13 {
            get {
                return this.tableEbs13;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs03DataTable Ebs03 {
            get {
                return this.tableEbs03;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs05DataTable Ebs05 {
            get {
                return this.tableEbs05;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs14DataTable Ebs14 {
            get {
                return this.tableEbs14;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs15DataTable Ebs15 {
            get {
                return this.tableEbs15;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DescriptionDataTable Description {
            get {
                return this.tableDescription;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Ebs11DataTable Ebs11 {
            get {
                return this.tableEbs11;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchoolDataTable School {
            get {
                return this.tableSchool;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TeacherDataTable Teacher {
            get {
                return this.tableTeacher;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BuildingDataTable Building {
            get {
                return this.tableBuilding;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EquipmentDataTable Equipment {
            get {
                return this.tableEquipment;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HusbandryDataTable Husbandry {
            get {
                return this.tableHusbandry;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EbsIndDataTable EbsInd {
            get {
                return this.tableEbsInd;
            }
        }
        
        public override DataSet Clone() {
            DatasetEBS cln = ((DatasetEBS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Region"] != null)) {
                this.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
            }
            if ((ds.Tables["Ebs06"] != null)) {
                this.Tables.Add(new Ebs06DataTable(ds.Tables["Ebs06"]));
            }
            if ((ds.Tables["Ebs08"] != null)) {
                this.Tables.Add(new Ebs08DataTable(ds.Tables["Ebs08"]));
            }
            if ((ds.Tables["Ebs01"] != null)) {
                this.Tables.Add(new Ebs01DataTable(ds.Tables["Ebs01"]));
            }
            if ((ds.Tables["Ebs02"] != null)) {
                this.Tables.Add(new Ebs02DataTable(ds.Tables["Ebs02"]));
            }
            if ((ds.Tables["Ebs10"] != null)) {
                this.Tables.Add(new Ebs10DataTable(ds.Tables["Ebs10"]));
            }
            if ((ds.Tables["Ebs07a"] != null)) {
                this.Tables.Add(new Ebs07aDataTable(ds.Tables["Ebs07a"]));
            }
            if ((ds.Tables["Ebs09"] != null)) {
                this.Tables.Add(new Ebs09DataTable(ds.Tables["Ebs09"]));
            }
            if ((ds.Tables["Ebs07"] != null)) {
                this.Tables.Add(new Ebs07DataTable(ds.Tables["Ebs07"]));
            }
            if ((ds.Tables["Ebs13"] != null)) {
                this.Tables.Add(new Ebs13DataTable(ds.Tables["Ebs13"]));
            }
            if ((ds.Tables["Ebs03"] != null)) {
                this.Tables.Add(new Ebs03DataTable(ds.Tables["Ebs03"]));
            }
            if ((ds.Tables["Ebs05"] != null)) {
                this.Tables.Add(new Ebs05DataTable(ds.Tables["Ebs05"]));
            }
            if ((ds.Tables["Ebs14"] != null)) {
                this.Tables.Add(new Ebs14DataTable(ds.Tables["Ebs14"]));
            }
            if ((ds.Tables["Ebs15"] != null)) {
                this.Tables.Add(new Ebs15DataTable(ds.Tables["Ebs15"]));
            }
            if ((ds.Tables["Description"] != null)) {
                this.Tables.Add(new DescriptionDataTable(ds.Tables["Description"]));
            }
            if ((ds.Tables["Ebs11"] != null)) {
                this.Tables.Add(new Ebs11DataTable(ds.Tables["Ebs11"]));
            }
            if ((ds.Tables["School"] != null)) {
                this.Tables.Add(new SchoolDataTable(ds.Tables["School"]));
            }
            if ((ds.Tables["Teacher"] != null)) {
                this.Tables.Add(new TeacherDataTable(ds.Tables["Teacher"]));
            }
            if ((ds.Tables["Building"] != null)) {
                this.Tables.Add(new BuildingDataTable(ds.Tables["Building"]));
            }
            if ((ds.Tables["Equipment"] != null)) {
                this.Tables.Add(new EquipmentDataTable(ds.Tables["Equipment"]));
            }
            if ((ds.Tables["Husbandry"] != null)) {
                this.Tables.Add(new HusbandryDataTable(ds.Tables["Husbandry"]));
            }
            if ((ds.Tables["EbsInd"] != null)) {
                this.Tables.Add(new EbsIndDataTable(ds.Tables["EbsInd"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableRegion = ((RegionDataTable)(this.Tables["Region"]));
            if ((this.tableRegion != null)) {
                this.tableRegion.InitVars();
            }
            this.tableEbs06 = ((Ebs06DataTable)(this.Tables["Ebs06"]));
            if ((this.tableEbs06 != null)) {
                this.tableEbs06.InitVars();
            }
            this.tableEbs08 = ((Ebs08DataTable)(this.Tables["Ebs08"]));
            if ((this.tableEbs08 != null)) {
                this.tableEbs08.InitVars();
            }
            this.tableEbs01 = ((Ebs01DataTable)(this.Tables["Ebs01"]));
            if ((this.tableEbs01 != null)) {
                this.tableEbs01.InitVars();
            }
            this.tableEbs02 = ((Ebs02DataTable)(this.Tables["Ebs02"]));
            if ((this.tableEbs02 != null)) {
                this.tableEbs02.InitVars();
            }
            this.tableEbs10 = ((Ebs10DataTable)(this.Tables["Ebs10"]));
            if ((this.tableEbs10 != null)) {
                this.tableEbs10.InitVars();
            }
            this.tableEbs07a = ((Ebs07aDataTable)(this.Tables["Ebs07a"]));
            if ((this.tableEbs07a != null)) {
                this.tableEbs07a.InitVars();
            }
            this.tableEbs09 = ((Ebs09DataTable)(this.Tables["Ebs09"]));
            if ((this.tableEbs09 != null)) {
                this.tableEbs09.InitVars();
            }
            this.tableEbs07 = ((Ebs07DataTable)(this.Tables["Ebs07"]));
            if ((this.tableEbs07 != null)) {
                this.tableEbs07.InitVars();
            }
            this.tableEbs13 = ((Ebs13DataTable)(this.Tables["Ebs13"]));
            if ((this.tableEbs13 != null)) {
                this.tableEbs13.InitVars();
            }
            this.tableEbs03 = ((Ebs03DataTable)(this.Tables["Ebs03"]));
            if ((this.tableEbs03 != null)) {
                this.tableEbs03.InitVars();
            }
            this.tableEbs05 = ((Ebs05DataTable)(this.Tables["Ebs05"]));
            if ((this.tableEbs05 != null)) {
                this.tableEbs05.InitVars();
            }
            this.tableEbs14 = ((Ebs14DataTable)(this.Tables["Ebs14"]));
            if ((this.tableEbs14 != null)) {
                this.tableEbs14.InitVars();
            }
            this.tableEbs15 = ((Ebs15DataTable)(this.Tables["Ebs15"]));
            if ((this.tableEbs15 != null)) {
                this.tableEbs15.InitVars();
            }
            this.tableDescription = ((DescriptionDataTable)(this.Tables["Description"]));
            if ((this.tableDescription != null)) {
                this.tableDescription.InitVars();
            }
            this.tableEbs11 = ((Ebs11DataTable)(this.Tables["Ebs11"]));
            if ((this.tableEbs11 != null)) {
                this.tableEbs11.InitVars();
            }
            this.tableSchool = ((SchoolDataTable)(this.Tables["School"]));
            if ((this.tableSchool != null)) {
                this.tableSchool.InitVars();
            }
            this.tableTeacher = ((TeacherDataTable)(this.Tables["Teacher"]));
            if ((this.tableTeacher != null)) {
                this.tableTeacher.InitVars();
            }
            this.tableBuilding = ((BuildingDataTable)(this.Tables["Building"]));
            if ((this.tableBuilding != null)) {
                this.tableBuilding.InitVars();
            }
            this.tableEquipment = ((EquipmentDataTable)(this.Tables["Equipment"]));
            if ((this.tableEquipment != null)) {
                this.tableEquipment.InitVars();
            }
            this.tableHusbandry = ((HusbandryDataTable)(this.Tables["Husbandry"]));
            if ((this.tableHusbandry != null)) {
                this.tableHusbandry.InitVars();
            }
            this.tableEbsInd = ((EbsIndDataTable)(this.Tables["EbsInd"]));
            if ((this.tableEbsInd != null)) {
                this.tableEbsInd.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DatasetEBS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatasetEBS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableRegion = new RegionDataTable();
            this.Tables.Add(this.tableRegion);
            this.tableEbs06 = new Ebs06DataTable();
            this.Tables.Add(this.tableEbs06);
            this.tableEbs08 = new Ebs08DataTable();
            this.Tables.Add(this.tableEbs08);
            this.tableEbs01 = new Ebs01DataTable();
            this.Tables.Add(this.tableEbs01);
            this.tableEbs02 = new Ebs02DataTable();
            this.Tables.Add(this.tableEbs02);
            this.tableEbs10 = new Ebs10DataTable();
            this.Tables.Add(this.tableEbs10);
            this.tableEbs07a = new Ebs07aDataTable();
            this.Tables.Add(this.tableEbs07a);
            this.tableEbs09 = new Ebs09DataTable();
            this.Tables.Add(this.tableEbs09);
            this.tableEbs07 = new Ebs07DataTable();
            this.Tables.Add(this.tableEbs07);
            this.tableEbs13 = new Ebs13DataTable();
            this.Tables.Add(this.tableEbs13);
            this.tableEbs03 = new Ebs03DataTable();
            this.Tables.Add(this.tableEbs03);
            this.tableEbs05 = new Ebs05DataTable();
            this.Tables.Add(this.tableEbs05);
            this.tableEbs14 = new Ebs14DataTable();
            this.Tables.Add(this.tableEbs14);
            this.tableEbs15 = new Ebs15DataTable();
            this.Tables.Add(this.tableEbs15);
            this.tableDescription = new DescriptionDataTable();
            this.Tables.Add(this.tableDescription);
            this.tableEbs11 = new Ebs11DataTable();
            this.Tables.Add(this.tableEbs11);
            this.tableSchool = new SchoolDataTable();
            this.Tables.Add(this.tableSchool);
            this.tableTeacher = new TeacherDataTable();
            this.Tables.Add(this.tableTeacher);
            this.tableBuilding = new BuildingDataTable();
            this.Tables.Add(this.tableBuilding);
            this.tableEquipment = new EquipmentDataTable();
            this.Tables.Add(this.tableEquipment);
            this.tableHusbandry = new HusbandryDataTable();
            this.Tables.Add(this.tableHusbandry);
            this.tableEbsInd = new EbsIndDataTable();
            this.Tables.Add(this.tableEbsInd);
        }
        
        private bool ShouldSerializeRegion() {
            return false;
        }
        
        private bool ShouldSerializeEbs06() {
            return false;
        }
        
        private bool ShouldSerializeEbs08() {
            return false;
        }
        
        private bool ShouldSerializeEbs01() {
            return false;
        }
        
        private bool ShouldSerializeEbs02() {
            return false;
        }
        
        private bool ShouldSerializeEbs10() {
            return false;
        }
        
        private bool ShouldSerializeEbs07a() {
            return false;
        }
        
        private bool ShouldSerializeEbs09() {
            return false;
        }
        
        private bool ShouldSerializeEbs07() {
            return false;
        }
        
        private bool ShouldSerializeEbs13() {
            return false;
        }
        
        private bool ShouldSerializeEbs03() {
            return false;
        }
        
        private bool ShouldSerializeEbs05() {
            return false;
        }
        
        private bool ShouldSerializeEbs14() {
            return false;
        }
        
        private bool ShouldSerializeEbs15() {
            return false;
        }
        
        private bool ShouldSerializeDescription() {
            return false;
        }
        
        private bool ShouldSerializeEbs11() {
            return false;
        }
        
        private bool ShouldSerializeSchool() {
            return false;
        }
        
        private bool ShouldSerializeTeacher() {
            return false;
        }
        
        private bool ShouldSerializeBuilding() {
            return false;
        }
        
        private bool ShouldSerializeEquipment() {
            return false;
        }
        
        private bool ShouldSerializeHusbandry() {
            return false;
        }
        
        private bool ShouldSerializeEbsInd() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void RegionRowChangeEventHandler(object sender, RegionRowChangeEvent e);
        
        public delegate void Ebs06RowChangeEventHandler(object sender, Ebs06RowChangeEvent e);
        
        public delegate void Ebs08RowChangeEventHandler(object sender, Ebs08RowChangeEvent e);
        
        public delegate void Ebs01RowChangeEventHandler(object sender, Ebs01RowChangeEvent e);
        
        public delegate void Ebs02RowChangeEventHandler(object sender, Ebs02RowChangeEvent e);
        
        public delegate void Ebs10RowChangeEventHandler(object sender, Ebs10RowChangeEvent e);
        
        public delegate void Ebs07aRowChangeEventHandler(object sender, Ebs07aRowChangeEvent e);
        
        public delegate void Ebs09RowChangeEventHandler(object sender, Ebs09RowChangeEvent e);
        
        public delegate void Ebs07RowChangeEventHandler(object sender, Ebs07RowChangeEvent e);
        
        public delegate void Ebs13RowChangeEventHandler(object sender, Ebs13RowChangeEvent e);
        
        public delegate void Ebs03RowChangeEventHandler(object sender, Ebs03RowChangeEvent e);
        
        public delegate void Ebs05RowChangeEventHandler(object sender, Ebs05RowChangeEvent e);
        
        public delegate void Ebs14RowChangeEventHandler(object sender, Ebs14RowChangeEvent e);
        
        public delegate void Ebs15RowChangeEventHandler(object sender, Ebs15RowChangeEvent e);
        
        public delegate void DescriptionRowChangeEventHandler(object sender, DescriptionRowChangeEvent e);
        
        public delegate void Ebs11RowChangeEventHandler(object sender, Ebs11RowChangeEvent e);
        
        public delegate void SchoolRowChangeEventHandler(object sender, SchoolRowChangeEvent e);
        
        public delegate void TeacherRowChangeEventHandler(object sender, TeacherRowChangeEvent e);
        
        public delegate void BuildingRowChangeEventHandler(object sender, BuildingRowChangeEvent e);
        
        public delegate void EquipmentRowChangeEventHandler(object sender, EquipmentRowChangeEvent e);
        
        public delegate void HusbandryRowChangeEventHandler(object sender, HusbandryRowChangeEvent e);
        
        public delegate void EbsIndRowChangeEventHandler(object sender, EbsIndRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RegionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_Rid;
            
            private DataColumn columnc_Name;
            
            internal RegionDataTable() : 
                    base("Region") {
                this.InitClass();
            }
            
            internal RegionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_RidColumn {
                get {
                    return this.columnc_Rid;
                }
            }
            
            internal DataColumn c_NameColumn {
                get {
                    return this.columnc_Name;
                }
            }
            
            public RegionRow this[int index] {
                get {
                    return ((RegionRow)(this.Rows[index]));
                }
            }
            
            public event RegionRowChangeEventHandler RegionRowChanged;
            
            public event RegionRowChangeEventHandler RegionRowChanging;
            
            public event RegionRowChangeEventHandler RegionRowDeleted;
            
            public event RegionRowChangeEventHandler RegionRowDeleting;
            
            public void AddRegionRow(RegionRow row) {
                this.Rows.Add(row);
            }
            
            public RegionRow AddRegionRow(int c_Rid, string c_Name) {
                RegionRow rowRegionRow = ((RegionRow)(this.NewRow()));
                rowRegionRow.ItemArray = new object[] {
                        c_Rid,
                        c_Name};
                this.Rows.Add(rowRegionRow);
                return rowRegionRow;
            }
            
            public RegionRow FindByc_Rid(int c_Rid) {
                return ((RegionRow)(this.Rows.Find(new object[] {
                            c_Rid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RegionDataTable cln = ((RegionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RegionDataTable();
            }
            
            internal void InitVars() {
                this.columnc_Rid = this.Columns["c_Rid"];
                this.columnc_Name = this.Columns["c_Name"];
            }
            
            private void InitClass() {
                this.columnc_Rid = new DataColumn("c_Rid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Rid);
                this.columnc_Name = new DataColumn("c_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Name);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey2", new DataColumn[] {
                                this.columnc_Rid}, true));
                this.columnc_Rid.AllowDBNull = false;
                this.columnc_Rid.Unique = true;
                this.columnc_Name.AllowDBNull = false;
            }
            
            public RegionRow NewRegionRow() {
                return ((RegionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RegionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RegionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegionRowChanged != null)) {
                    this.RegionRowChanged(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegionRowChanging != null)) {
                    this.RegionRowChanging(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegionRowDeleted != null)) {
                    this.RegionRowDeleted(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegionRowDeleting != null)) {
                    this.RegionRowDeleting(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRegionRow(RegionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RegionRow : DataRow {
            
            private RegionDataTable tableRegion;
            
            internal RegionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegion = ((RegionDataTable)(this.Table));
            }
            
            public int c_Rid {
                get {
                    return ((int)(this[this.tableRegion.c_RidColumn]));
                }
                set {
                    this[this.tableRegion.c_RidColumn] = value;
                }
            }
            
            public string c_Name {
                get {
                    return ((string)(this[this.tableRegion.c_NameColumn]));
                }
                set {
                    this[this.tableRegion.c_NameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RegionRowChangeEvent : EventArgs {
            
            private RegionRow eventRow;
            
            private DataRowAction eventAction;
            
            public RegionRowChangeEvent(RegionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RegionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs06DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Grad;
            
            private DataColumn columnc_GradFe;
            
            private DataColumn columnc_Ex;
            
            private DataColumn columnc_ExFe;
            
            internal Ebs06DataTable() : 
                    base("Ebs06") {
                this.InitClass();
            }
            
            internal Ebs06DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_GradColumn {
                get {
                    return this.columnc_Grad;
                }
            }
            
            internal DataColumn c_GradFeColumn {
                get {
                    return this.columnc_GradFe;
                }
            }
            
            internal DataColumn c_ExColumn {
                get {
                    return this.columnc_Ex;
                }
            }
            
            internal DataColumn c_ExFeColumn {
                get {
                    return this.columnc_ExFe;
                }
            }
            
            public Ebs06Row this[int index] {
                get {
                    return ((Ebs06Row)(this.Rows[index]));
                }
            }
            
            public event Ebs06RowChangeEventHandler Ebs06RowChanged;
            
            public event Ebs06RowChangeEventHandler Ebs06RowChanging;
            
            public event Ebs06RowChangeEventHandler Ebs06RowDeleted;
            
            public event Ebs06RowChangeEventHandler Ebs06RowDeleting;
            
            public void AddEbs06Row(Ebs06Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs06Row AddEbs06Row(long c_ArcId, string c_DescId, int c_Grad, int c_GradFe, int c_Ex, int c_ExFe) {
                Ebs06Row rowEbs06Row = ((Ebs06Row)(this.NewRow()));
                rowEbs06Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Grad,
                        c_GradFe,
                        c_Ex,
                        c_ExFe};
                this.Rows.Add(rowEbs06Row);
                return rowEbs06Row;
            }
            
            public Ebs06Row FindByc_ArcIdc_DescId(long c_ArcId, string c_DescId) {
                return ((Ebs06Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs06DataTable cln = ((Ebs06DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs06DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Grad = this.Columns["c_Grad"];
                this.columnc_GradFe = this.Columns["c_GradFe"];
                this.columnc_Ex = this.Columns["c_Ex"];
                this.columnc_ExFe = this.Columns["c_ExFe"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Grad = new DataColumn("c_Grad", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Grad);
                this.columnc_GradFe = new DataColumn("c_GradFe", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_GradFe);
                this.columnc_Ex = new DataColumn("c_Ex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Ex);
                this.columnc_ExFe = new DataColumn("c_ExFe", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ExFe);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey8", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
            }
            
            public Ebs06Row NewEbs06Row() {
                return ((Ebs06Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs06Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs06Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs06RowChanged != null)) {
                    this.Ebs06RowChanged(this, new Ebs06RowChangeEvent(((Ebs06Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs06RowChanging != null)) {
                    this.Ebs06RowChanging(this, new Ebs06RowChangeEvent(((Ebs06Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs06RowDeleted != null)) {
                    this.Ebs06RowDeleted(this, new Ebs06RowChangeEvent(((Ebs06Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs06RowDeleting != null)) {
                    this.Ebs06RowDeleting(this, new Ebs06RowChangeEvent(((Ebs06Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs06Row(Ebs06Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs06Row : DataRow {
            
            private Ebs06DataTable tableEbs06;
            
            internal Ebs06Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs06 = ((Ebs06DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs06.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs06.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs06.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs06.c_DescIdColumn] = value;
                }
            }
            
            public int c_Grad {
                get {
                    try {
                        return ((int)(this[this.tableEbs06.c_GradColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs06.c_GradColumn] = value;
                }
            }
            
            public int c_GradFe {
                get {
                    try {
                        return ((int)(this[this.tableEbs06.c_GradFeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs06.c_GradFeColumn] = value;
                }
            }
            
            public int c_Ex {
                get {
                    try {
                        return ((int)(this[this.tableEbs06.c_ExColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs06.c_ExColumn] = value;
                }
            }
            
            public int c_ExFe {
                get {
                    try {
                        return ((int)(this[this.tableEbs06.c_ExFeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs06.c_ExFeColumn] = value;
                }
            }
            
            public bool Isc_GradNull() {
                return this.IsNull(this.tableEbs06.c_GradColumn);
            }
            
            public void Setc_GradNull() {
                this[this.tableEbs06.c_GradColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_GradFeNull() {
                return this.IsNull(this.tableEbs06.c_GradFeColumn);
            }
            
            public void Setc_GradFeNull() {
                this[this.tableEbs06.c_GradFeColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_ExNull() {
                return this.IsNull(this.tableEbs06.c_ExColumn);
            }
            
            public void Setc_ExNull() {
                this[this.tableEbs06.c_ExColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_ExFeNull() {
                return this.IsNull(this.tableEbs06.c_ExFeColumn);
            }
            
            public void Setc_ExFeNull() {
                this[this.tableEbs06.c_ExFeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs06RowChangeEvent : EventArgs {
            
            private Ebs06Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs06RowChangeEvent(Ebs06Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs06Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs08DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Count;
            
            private DataColumn columnc_CountFe;
            
            internal Ebs08DataTable() : 
                    base("Ebs08") {
                this.InitClass();
            }
            
            internal Ebs08DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            internal DataColumn c_CountFeColumn {
                get {
                    return this.columnc_CountFe;
                }
            }
            
            public Ebs08Row this[int index] {
                get {
                    return ((Ebs08Row)(this.Rows[index]));
                }
            }
            
            public event Ebs08RowChangeEventHandler Ebs08RowChanged;
            
            public event Ebs08RowChangeEventHandler Ebs08RowChanging;
            
            public event Ebs08RowChangeEventHandler Ebs08RowDeleted;
            
            public event Ebs08RowChangeEventHandler Ebs08RowDeleting;
            
            public void AddEbs08Row(Ebs08Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs08Row AddEbs08Row(long c_ArcId, string c_DescId, int c_Count, int c_CountFe) {
                Ebs08Row rowEbs08Row = ((Ebs08Row)(this.NewRow()));
                rowEbs08Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Count,
                        c_CountFe};
                this.Rows.Add(rowEbs08Row);
                return rowEbs08Row;
            }
            
            public Ebs08Row FindByc_ArcIdc_DescId(long c_ArcId, string c_DescId) {
                return ((Ebs08Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs08DataTable cln = ((Ebs08DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs08DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Count = this.Columns["c_Count"];
                this.columnc_CountFe = this.Columns["c_CountFe"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.columnc_CountFe = new DataColumn("c_CountFe", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_CountFe);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey11", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
            }
            
            public Ebs08Row NewEbs08Row() {
                return ((Ebs08Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs08Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs08Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs08RowChanged != null)) {
                    this.Ebs08RowChanged(this, new Ebs08RowChangeEvent(((Ebs08Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs08RowChanging != null)) {
                    this.Ebs08RowChanging(this, new Ebs08RowChangeEvent(((Ebs08Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs08RowDeleted != null)) {
                    this.Ebs08RowDeleted(this, new Ebs08RowChangeEvent(((Ebs08Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs08RowDeleting != null)) {
                    this.Ebs08RowDeleting(this, new Ebs08RowChangeEvent(((Ebs08Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs08Row(Ebs08Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs08Row : DataRow {
            
            private Ebs08DataTable tableEbs08;
            
            internal Ebs08Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs08 = ((Ebs08DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs08.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs08.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs08.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs08.c_DescIdColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs08.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs08.c_CountColumn] = value;
                }
            }
            
            public int c_CountFe {
                get {
                    try {
                        return ((int)(this[this.tableEbs08.c_CountFeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs08.c_CountFeColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs08.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs08.c_CountColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CountFeNull() {
                return this.IsNull(this.tableEbs08.c_CountFeColumn);
            }
            
            public void Setc_CountFeNull() {
                this[this.tableEbs08.c_CountFeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs08RowChangeEvent : EventArgs {
            
            private Ebs08Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs08RowChangeEvent(Ebs08Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs08Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs01DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Class;
            
            private DataColumn columnc_Count;
            
            internal Ebs01DataTable() : 
                    base("Ebs01") {
                this.InitClass();
            }
            
            internal Ebs01DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ClassColumn {
                get {
                    return this.columnc_Class;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs01Row this[int index] {
                get {
                    return ((Ebs01Row)(this.Rows[index]));
                }
            }
            
            public event Ebs01RowChangeEventHandler Ebs01RowChanged;
            
            public event Ebs01RowChangeEventHandler Ebs01RowChanging;
            
            public event Ebs01RowChangeEventHandler Ebs01RowDeleted;
            
            public event Ebs01RowChangeEventHandler Ebs01RowDeleting;
            
            public void AddEbs01Row(Ebs01Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs01Row AddEbs01Row(long c_ArcId, string c_DescId, int c_Class, int c_Count) {
                Ebs01Row rowEbs01Row = ((Ebs01Row)(this.NewRow()));
                rowEbs01Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Class,
                        c_Count};
                this.Rows.Add(rowEbs01Row);
                return rowEbs01Row;
            }
            
            public Ebs01Row FindByc_ArcIdc_DescIdc_Class(long c_ArcId, string c_DescId, int c_Class) {
                return ((Ebs01Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Class})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs01DataTable cln = ((Ebs01DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs01DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Class = this.Columns["c_Class"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Class = new DataColumn("c_Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Class);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey4", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Class}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Class.AllowDBNull = false;
            }
            
            public Ebs01Row NewEbs01Row() {
                return ((Ebs01Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs01Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs01Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs01RowChanged != null)) {
                    this.Ebs01RowChanged(this, new Ebs01RowChangeEvent(((Ebs01Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs01RowChanging != null)) {
                    this.Ebs01RowChanging(this, new Ebs01RowChangeEvent(((Ebs01Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs01RowDeleted != null)) {
                    this.Ebs01RowDeleted(this, new Ebs01RowChangeEvent(((Ebs01Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs01RowDeleting != null)) {
                    this.Ebs01RowDeleting(this, new Ebs01RowChangeEvent(((Ebs01Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs01Row(Ebs01Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs01Row : DataRow {
            
            private Ebs01DataTable tableEbs01;
            
            internal Ebs01Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs01 = ((Ebs01DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs01.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs01.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs01.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs01.c_DescIdColumn] = value;
                }
            }
            
            public int c_Class {
                get {
                    return ((int)(this[this.tableEbs01.c_ClassColumn]));
                }
                set {
                    this[this.tableEbs01.c_ClassColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs01.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs01.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs01.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs01.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs01RowChangeEvent : EventArgs {
            
            private Ebs01Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs01RowChangeEvent(Ebs01Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs01Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs02DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Class;
            
            private DataColumn columnc_Count;
            
            internal Ebs02DataTable() : 
                    base("Ebs02") {
                this.InitClass();
            }
            
            internal Ebs02DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ClassColumn {
                get {
                    return this.columnc_Class;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs02Row this[int index] {
                get {
                    return ((Ebs02Row)(this.Rows[index]));
                }
            }
            
            public event Ebs02RowChangeEventHandler Ebs02RowChanged;
            
            public event Ebs02RowChangeEventHandler Ebs02RowChanging;
            
            public event Ebs02RowChangeEventHandler Ebs02RowDeleted;
            
            public event Ebs02RowChangeEventHandler Ebs02RowDeleting;
            
            public void AddEbs02Row(Ebs02Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs02Row AddEbs02Row(long c_ArcId, string c_DescId, int c_Class, int c_Count) {
                Ebs02Row rowEbs02Row = ((Ebs02Row)(this.NewRow()));
                rowEbs02Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Class,
                        c_Count};
                this.Rows.Add(rowEbs02Row);
                return rowEbs02Row;
            }
            
            public Ebs02Row FindByc_ArcIdc_DescIdc_Class(long c_ArcId, string c_DescId, int c_Class) {
                return ((Ebs02Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Class})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs02DataTable cln = ((Ebs02DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs02DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Class = this.Columns["c_Class"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Class = new DataColumn("c_Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Class);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey5", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Class}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Class.AllowDBNull = false;
            }
            
            public Ebs02Row NewEbs02Row() {
                return ((Ebs02Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs02Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs02Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs02RowChanged != null)) {
                    this.Ebs02RowChanged(this, new Ebs02RowChangeEvent(((Ebs02Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs02RowChanging != null)) {
                    this.Ebs02RowChanging(this, new Ebs02RowChangeEvent(((Ebs02Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs02RowDeleted != null)) {
                    this.Ebs02RowDeleted(this, new Ebs02RowChangeEvent(((Ebs02Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs02RowDeleting != null)) {
                    this.Ebs02RowDeleting(this, new Ebs02RowChangeEvent(((Ebs02Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs02Row(Ebs02Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs02Row : DataRow {
            
            private Ebs02DataTable tableEbs02;
            
            internal Ebs02Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs02 = ((Ebs02DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs02.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs02.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs02.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs02.c_DescIdColumn] = value;
                }
            }
            
            public int c_Class {
                get {
                    return ((int)(this[this.tableEbs02.c_ClassColumn]));
                }
                set {
                    this[this.tableEbs02.c_ClassColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs02.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs02.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs02.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs02.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs02RowChangeEvent : EventArgs {
            
            private Ebs02Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs02RowChangeEvent(Ebs02Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs02Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs10DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Class;
            
            private DataColumn columnc_Count;
            
            internal Ebs10DataTable() : 
                    base("Ebs10") {
                this.InitClass();
            }
            
            internal Ebs10DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ClassColumn {
                get {
                    return this.columnc_Class;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs10Row this[int index] {
                get {
                    return ((Ebs10Row)(this.Rows[index]));
                }
            }
            
            public event Ebs10RowChangeEventHandler Ebs10RowChanged;
            
            public event Ebs10RowChangeEventHandler Ebs10RowChanging;
            
            public event Ebs10RowChangeEventHandler Ebs10RowDeleted;
            
            public event Ebs10RowChangeEventHandler Ebs10RowDeleting;
            
            public void AddEbs10Row(Ebs10Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs10Row AddEbs10Row(long c_ArcId, string c_DescId, int c_Class, int c_Count) {
                Ebs10Row rowEbs10Row = ((Ebs10Row)(this.NewRow()));
                rowEbs10Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Class,
                        c_Count};
                this.Rows.Add(rowEbs10Row);
                return rowEbs10Row;
            }
            
            public Ebs10Row FindByc_ArcIdc_DescIdc_Class(long c_ArcId, string c_DescId, int c_Class) {
                return ((Ebs10Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Class})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs10DataTable cln = ((Ebs10DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs10DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Class = this.Columns["c_Class"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Class = new DataColumn("c_Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Class);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey13", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Class}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Class.AllowDBNull = false;
            }
            
            public Ebs10Row NewEbs10Row() {
                return ((Ebs10Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs10Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs10Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs10RowChanged != null)) {
                    this.Ebs10RowChanged(this, new Ebs10RowChangeEvent(((Ebs10Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs10RowChanging != null)) {
                    this.Ebs10RowChanging(this, new Ebs10RowChangeEvent(((Ebs10Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs10RowDeleted != null)) {
                    this.Ebs10RowDeleted(this, new Ebs10RowChangeEvent(((Ebs10Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs10RowDeleting != null)) {
                    this.Ebs10RowDeleting(this, new Ebs10RowChangeEvent(((Ebs10Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs10Row(Ebs10Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs10Row : DataRow {
            
            private Ebs10DataTable tableEbs10;
            
            internal Ebs10Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs10 = ((Ebs10DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs10.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs10.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs10.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs10.c_DescIdColumn] = value;
                }
            }
            
            public int c_Class {
                get {
                    return ((int)(this[this.tableEbs10.c_ClassColumn]));
                }
                set {
                    this[this.tableEbs10.c_ClassColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs10.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs10.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs10.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs10.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs10RowChangeEvent : EventArgs {
            
            private Ebs10Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs10RowChangeEvent(Ebs10Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs10Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs07aDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Prof;
            
            private DataColumn columnc_Count;
            
            internal Ebs07aDataTable() : 
                    base("Ebs07a") {
                this.InitClass();
            }
            
            internal Ebs07aDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ProfColumn {
                get {
                    return this.columnc_Prof;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs07aRow this[int index] {
                get {
                    return ((Ebs07aRow)(this.Rows[index]));
                }
            }
            
            public event Ebs07aRowChangeEventHandler Ebs07aRowChanged;
            
            public event Ebs07aRowChangeEventHandler Ebs07aRowChanging;
            
            public event Ebs07aRowChangeEventHandler Ebs07aRowDeleted;
            
            public event Ebs07aRowChangeEventHandler Ebs07aRowDeleting;
            
            public void AddEbs07aRow(Ebs07aRow row) {
                this.Rows.Add(row);
            }
            
            public Ebs07aRow AddEbs07aRow(long c_ArcId, string c_DescId, string c_Prof, int c_Count) {
                Ebs07aRow rowEbs07aRow = ((Ebs07aRow)(this.NewRow()));
                rowEbs07aRow.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Prof,
                        c_Count};
                this.Rows.Add(rowEbs07aRow);
                return rowEbs07aRow;
            }
            
            public Ebs07aRow FindByc_ArcIdc_DescIdc_Prof(long c_ArcId, string c_DescId, string c_Prof) {
                return ((Ebs07aRow)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Prof})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs07aDataTable cln = ((Ebs07aDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs07aDataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Prof = this.Columns["c_Prof"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Prof = new DataColumn("c_Prof", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Prof);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey10", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Prof}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Prof.AllowDBNull = false;
            }
            
            public Ebs07aRow NewEbs07aRow() {
                return ((Ebs07aRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs07aRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs07aRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs07aRowChanged != null)) {
                    this.Ebs07aRowChanged(this, new Ebs07aRowChangeEvent(((Ebs07aRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs07aRowChanging != null)) {
                    this.Ebs07aRowChanging(this, new Ebs07aRowChangeEvent(((Ebs07aRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs07aRowDeleted != null)) {
                    this.Ebs07aRowDeleted(this, new Ebs07aRowChangeEvent(((Ebs07aRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs07aRowDeleting != null)) {
                    this.Ebs07aRowDeleting(this, new Ebs07aRowChangeEvent(((Ebs07aRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs07aRow(Ebs07aRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs07aRow : DataRow {
            
            private Ebs07aDataTable tableEbs07a;
            
            internal Ebs07aRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs07a = ((Ebs07aDataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs07a.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs07a.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs07a.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs07a.c_DescIdColumn] = value;
                }
            }
            
            public string c_Prof {
                get {
                    return ((string)(this[this.tableEbs07a.c_ProfColumn]));
                }
                set {
                    this[this.tableEbs07a.c_ProfColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs07a.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs07a.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs07a.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs07a.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs07aRowChangeEvent : EventArgs {
            
            private Ebs07aRow eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs07aRowChangeEvent(Ebs07aRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs07aRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs09DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Staff;
            
            private DataColumn columnc_Count;
            
            internal Ebs09DataTable() : 
                    base("Ebs09") {
                this.InitClass();
            }
            
            internal Ebs09DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_StaffColumn {
                get {
                    return this.columnc_Staff;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs09Row this[int index] {
                get {
                    return ((Ebs09Row)(this.Rows[index]));
                }
            }
            
            public event Ebs09RowChangeEventHandler Ebs09RowChanged;
            
            public event Ebs09RowChangeEventHandler Ebs09RowChanging;
            
            public event Ebs09RowChangeEventHandler Ebs09RowDeleted;
            
            public event Ebs09RowChangeEventHandler Ebs09RowDeleting;
            
            public void AddEbs09Row(Ebs09Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs09Row AddEbs09Row(long c_ArcId, string c_DescId, string c_Staff, int c_Count) {
                Ebs09Row rowEbs09Row = ((Ebs09Row)(this.NewRow()));
                rowEbs09Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Staff,
                        c_Count};
                this.Rows.Add(rowEbs09Row);
                return rowEbs09Row;
            }
            
            public Ebs09Row FindByc_ArcIdc_DescIdc_Staff(long c_ArcId, string c_DescId, string c_Staff) {
                return ((Ebs09Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Staff})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs09DataTable cln = ((Ebs09DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs09DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Staff = this.Columns["c_Staff"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Staff = new DataColumn("c_Staff", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Staff);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey12", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Staff}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Staff.AllowDBNull = false;
            }
            
            public Ebs09Row NewEbs09Row() {
                return ((Ebs09Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs09Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs09Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs09RowChanged != null)) {
                    this.Ebs09RowChanged(this, new Ebs09RowChangeEvent(((Ebs09Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs09RowChanging != null)) {
                    this.Ebs09RowChanging(this, new Ebs09RowChangeEvent(((Ebs09Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs09RowDeleted != null)) {
                    this.Ebs09RowDeleted(this, new Ebs09RowChangeEvent(((Ebs09Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs09RowDeleting != null)) {
                    this.Ebs09RowDeleting(this, new Ebs09RowChangeEvent(((Ebs09Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs09Row(Ebs09Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs09Row : DataRow {
            
            private Ebs09DataTable tableEbs09;
            
            internal Ebs09Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs09 = ((Ebs09DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs09.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs09.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs09.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs09.c_DescIdColumn] = value;
                }
            }
            
            public string c_Staff {
                get {
                    return ((string)(this[this.tableEbs09.c_StaffColumn]));
                }
                set {
                    this[this.tableEbs09.c_StaffColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs09.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs09.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs09.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs09.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs09RowChangeEvent : EventArgs {
            
            private Ebs09Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs09RowChangeEvent(Ebs09Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs09Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs07DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Prof;
            
            private DataColumn columnc_Count;
            
            internal Ebs07DataTable() : 
                    base("Ebs07") {
                this.InitClass();
            }
            
            internal Ebs07DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ProfColumn {
                get {
                    return this.columnc_Prof;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs07Row this[int index] {
                get {
                    return ((Ebs07Row)(this.Rows[index]));
                }
            }
            
            public event Ebs07RowChangeEventHandler Ebs07RowChanged;
            
            public event Ebs07RowChangeEventHandler Ebs07RowChanging;
            
            public event Ebs07RowChangeEventHandler Ebs07RowDeleted;
            
            public event Ebs07RowChangeEventHandler Ebs07RowDeleting;
            
            public void AddEbs07Row(Ebs07Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs07Row AddEbs07Row(long c_ArcId, string c_DescId, string c_Prof, int c_Count) {
                Ebs07Row rowEbs07Row = ((Ebs07Row)(this.NewRow()));
                rowEbs07Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Prof,
                        c_Count};
                this.Rows.Add(rowEbs07Row);
                return rowEbs07Row;
            }
            
            public Ebs07Row FindByc_ArcIdc_DescIdc_Prof(long c_ArcId, string c_DescId, string c_Prof) {
                return ((Ebs07Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Prof})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs07DataTable cln = ((Ebs07DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs07DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Prof = this.Columns["c_Prof"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Prof = new DataColumn("c_Prof", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Prof);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey9", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Prof}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Prof.AllowDBNull = false;
            }
            
            public Ebs07Row NewEbs07Row() {
                return ((Ebs07Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs07Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs07Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs07RowChanged != null)) {
                    this.Ebs07RowChanged(this, new Ebs07RowChangeEvent(((Ebs07Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs07RowChanging != null)) {
                    this.Ebs07RowChanging(this, new Ebs07RowChangeEvent(((Ebs07Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs07RowDeleted != null)) {
                    this.Ebs07RowDeleted(this, new Ebs07RowChangeEvent(((Ebs07Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs07RowDeleting != null)) {
                    this.Ebs07RowDeleting(this, new Ebs07RowChangeEvent(((Ebs07Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs07Row(Ebs07Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs07Row : DataRow {
            
            private Ebs07DataTable tableEbs07;
            
            internal Ebs07Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs07 = ((Ebs07DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs07.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs07.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs07.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs07.c_DescIdColumn] = value;
                }
            }
            
            public string c_Prof {
                get {
                    return ((string)(this[this.tableEbs07.c_ProfColumn]));
                }
                set {
                    this[this.tableEbs07.c_ProfColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs07.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs07.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs07.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs07.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs07RowChangeEvent : EventArgs {
            
            private Ebs07Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs07RowChangeEvent(Ebs07Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs07Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs13DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Class;
            
            private DataColumn columnc_Lesson;
            
            private DataColumn columnc_Count;
            
            internal Ebs13DataTable() : 
                    base("Ebs13") {
                this.InitClass();
            }
            
            internal Ebs13DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ClassColumn {
                get {
                    return this.columnc_Class;
                }
            }
            
            internal DataColumn c_LessonColumn {
                get {
                    return this.columnc_Lesson;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs13Row this[int index] {
                get {
                    return ((Ebs13Row)(this.Rows[index]));
                }
            }
            
            public event Ebs13RowChangeEventHandler Ebs13RowChanged;
            
            public event Ebs13RowChangeEventHandler Ebs13RowChanging;
            
            public event Ebs13RowChangeEventHandler Ebs13RowDeleted;
            
            public event Ebs13RowChangeEventHandler Ebs13RowDeleting;
            
            public void AddEbs13Row(Ebs13Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs13Row AddEbs13Row(long c_ArcId, string c_DescId, int c_Class, string c_Lesson, int c_Count) {
                Ebs13Row rowEbs13Row = ((Ebs13Row)(this.NewRow()));
                rowEbs13Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Class,
                        c_Lesson,
                        c_Count};
                this.Rows.Add(rowEbs13Row);
                return rowEbs13Row;
            }
            
            public Ebs13Row FindByc_ArcIdc_DescIdc_Classc_Lesson(long c_ArcId, string c_DescId, int c_Class, string c_Lesson) {
                return ((Ebs13Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Class,
                            c_Lesson})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs13DataTable cln = ((Ebs13DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs13DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Class = this.Columns["c_Class"];
                this.columnc_Lesson = this.Columns["c_Lesson"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Class = new DataColumn("c_Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Class);
                this.columnc_Lesson = new DataColumn("c_Lesson", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Lesson);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey15", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Class,
                                this.columnc_Lesson}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Class.AllowDBNull = false;
                this.columnc_Lesson.AllowDBNull = false;
            }
            
            public Ebs13Row NewEbs13Row() {
                return ((Ebs13Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs13Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs13Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs13RowChanged != null)) {
                    this.Ebs13RowChanged(this, new Ebs13RowChangeEvent(((Ebs13Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs13RowChanging != null)) {
                    this.Ebs13RowChanging(this, new Ebs13RowChangeEvent(((Ebs13Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs13RowDeleted != null)) {
                    this.Ebs13RowDeleted(this, new Ebs13RowChangeEvent(((Ebs13Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs13RowDeleting != null)) {
                    this.Ebs13RowDeleting(this, new Ebs13RowChangeEvent(((Ebs13Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs13Row(Ebs13Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs13Row : DataRow {
            
            private Ebs13DataTable tableEbs13;
            
            internal Ebs13Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs13 = ((Ebs13DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs13.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs13.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs13.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs13.c_DescIdColumn] = value;
                }
            }
            
            public int c_Class {
                get {
                    return ((int)(this[this.tableEbs13.c_ClassColumn]));
                }
                set {
                    this[this.tableEbs13.c_ClassColumn] = value;
                }
            }
            
            public string c_Lesson {
                get {
                    return ((string)(this[this.tableEbs13.c_LessonColumn]));
                }
                set {
                    this[this.tableEbs13.c_LessonColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs13.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs13.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs13.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs13.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs13RowChangeEvent : EventArgs {
            
            private Ebs13Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs13RowChangeEvent(Ebs13Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs13Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs03DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Class;
            
            private DataColumn columnc_Lesson;
            
            private DataColumn columnc_Count;
            
            internal Ebs03DataTable() : 
                    base("Ebs03") {
                this.InitClass();
            }
            
            internal Ebs03DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ClassColumn {
                get {
                    return this.columnc_Class;
                }
            }
            
            internal DataColumn c_LessonColumn {
                get {
                    return this.columnc_Lesson;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs03Row this[int index] {
                get {
                    return ((Ebs03Row)(this.Rows[index]));
                }
            }
            
            public event Ebs03RowChangeEventHandler Ebs03RowChanged;
            
            public event Ebs03RowChangeEventHandler Ebs03RowChanging;
            
            public event Ebs03RowChangeEventHandler Ebs03RowDeleted;
            
            public event Ebs03RowChangeEventHandler Ebs03RowDeleting;
            
            public void AddEbs03Row(Ebs03Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs03Row AddEbs03Row(long c_ArcId, string c_DescId, int c_Class, string c_Lesson, int c_Count) {
                Ebs03Row rowEbs03Row = ((Ebs03Row)(this.NewRow()));
                rowEbs03Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Class,
                        c_Lesson,
                        c_Count};
                this.Rows.Add(rowEbs03Row);
                return rowEbs03Row;
            }
            
            public Ebs03Row FindByc_ArcIdc_DescIdc_Classc_Lesson(long c_ArcId, string c_DescId, int c_Class, string c_Lesson) {
                return ((Ebs03Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Class,
                            c_Lesson})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs03DataTable cln = ((Ebs03DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs03DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Class = this.Columns["c_Class"];
                this.columnc_Lesson = this.Columns["c_Lesson"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Class = new DataColumn("c_Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Class);
                this.columnc_Lesson = new DataColumn("c_Lesson", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Lesson);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey6", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Class,
                                this.columnc_Lesson}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Class.AllowDBNull = false;
                this.columnc_Lesson.AllowDBNull = false;
            }
            
            public Ebs03Row NewEbs03Row() {
                return ((Ebs03Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs03Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs03Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs03RowChanged != null)) {
                    this.Ebs03RowChanged(this, new Ebs03RowChangeEvent(((Ebs03Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs03RowChanging != null)) {
                    this.Ebs03RowChanging(this, new Ebs03RowChangeEvent(((Ebs03Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs03RowDeleted != null)) {
                    this.Ebs03RowDeleted(this, new Ebs03RowChangeEvent(((Ebs03Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs03RowDeleting != null)) {
                    this.Ebs03RowDeleting(this, new Ebs03RowChangeEvent(((Ebs03Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs03Row(Ebs03Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs03Row : DataRow {
            
            private Ebs03DataTable tableEbs03;
            
            internal Ebs03Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs03 = ((Ebs03DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs03.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs03.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs03.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs03.c_DescIdColumn] = value;
                }
            }
            
            public int c_Class {
                get {
                    return ((int)(this[this.tableEbs03.c_ClassColumn]));
                }
                set {
                    this[this.tableEbs03.c_ClassColumn] = value;
                }
            }
            
            public string c_Lesson {
                get {
                    return ((string)(this[this.tableEbs03.c_LessonColumn]));
                }
                set {
                    this[this.tableEbs03.c_LessonColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs03.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs03.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs03.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs03.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs03RowChangeEvent : EventArgs {
            
            private Ebs03Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs03RowChangeEvent(Ebs03Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs03Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs05DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Class;
            
            private DataColumn columnc_Lesson;
            
            private DataColumn columnc_Count;
            
            internal Ebs05DataTable() : 
                    base("Ebs05") {
                this.InitClass();
            }
            
            internal Ebs05DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ClassColumn {
                get {
                    return this.columnc_Class;
                }
            }
            
            internal DataColumn c_LessonColumn {
                get {
                    return this.columnc_Lesson;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs05Row this[int index] {
                get {
                    return ((Ebs05Row)(this.Rows[index]));
                }
            }
            
            public event Ebs05RowChangeEventHandler Ebs05RowChanged;
            
            public event Ebs05RowChangeEventHandler Ebs05RowChanging;
            
            public event Ebs05RowChangeEventHandler Ebs05RowDeleted;
            
            public event Ebs05RowChangeEventHandler Ebs05RowDeleting;
            
            public void AddEbs05Row(Ebs05Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs05Row AddEbs05Row(long c_ArcId, string c_DescId, int c_Class, string c_Lesson, int c_Count) {
                Ebs05Row rowEbs05Row = ((Ebs05Row)(this.NewRow()));
                rowEbs05Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Class,
                        c_Lesson,
                        c_Count};
                this.Rows.Add(rowEbs05Row);
                return rowEbs05Row;
            }
            
            public Ebs05Row FindByc_ArcIdc_DescIdc_Classc_Lesson(long c_ArcId, string c_DescId, int c_Class, string c_Lesson) {
                return ((Ebs05Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Class,
                            c_Lesson})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs05DataTable cln = ((Ebs05DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs05DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Class = this.Columns["c_Class"];
                this.columnc_Lesson = this.Columns["c_Lesson"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Class = new DataColumn("c_Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Class);
                this.columnc_Lesson = new DataColumn("c_Lesson", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Lesson);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey7", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Class,
                                this.columnc_Lesson}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Class.AllowDBNull = false;
                this.columnc_Lesson.AllowDBNull = false;
            }
            
            public Ebs05Row NewEbs05Row() {
                return ((Ebs05Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs05Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs05Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs05RowChanged != null)) {
                    this.Ebs05RowChanged(this, new Ebs05RowChangeEvent(((Ebs05Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs05RowChanging != null)) {
                    this.Ebs05RowChanging(this, new Ebs05RowChangeEvent(((Ebs05Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs05RowDeleted != null)) {
                    this.Ebs05RowDeleted(this, new Ebs05RowChangeEvent(((Ebs05Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs05RowDeleting != null)) {
                    this.Ebs05RowDeleting(this, new Ebs05RowChangeEvent(((Ebs05Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs05Row(Ebs05Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs05Row : DataRow {
            
            private Ebs05DataTable tableEbs05;
            
            internal Ebs05Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs05 = ((Ebs05DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs05.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs05.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs05.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs05.c_DescIdColumn] = value;
                }
            }
            
            public int c_Class {
                get {
                    return ((int)(this[this.tableEbs05.c_ClassColumn]));
                }
                set {
                    this[this.tableEbs05.c_ClassColumn] = value;
                }
            }
            
            public string c_Lesson {
                get {
                    return ((string)(this[this.tableEbs05.c_LessonColumn]));
                }
                set {
                    this[this.tableEbs05.c_LessonColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs05.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs05.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs05.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs05.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs05RowChangeEvent : EventArgs {
            
            private Ebs05Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs05RowChangeEvent(Ebs05Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs05Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs14DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_For;
            
            private DataColumn columnc_Total;
            
            internal Ebs14DataTable() : 
                    base("Ebs14") {
                this.InitClass();
            }
            
            internal Ebs14DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ForColumn {
                get {
                    return this.columnc_For;
                }
            }
            
            internal DataColumn c_TotalColumn {
                get {
                    return this.columnc_Total;
                }
            }
            
            public Ebs14Row this[int index] {
                get {
                    return ((Ebs14Row)(this.Rows[index]));
                }
            }
            
            public event Ebs14RowChangeEventHandler Ebs14RowChanged;
            
            public event Ebs14RowChangeEventHandler Ebs14RowChanging;
            
            public event Ebs14RowChangeEventHandler Ebs14RowDeleted;
            
            public event Ebs14RowChangeEventHandler Ebs14RowDeleting;
            
            public void AddEbs14Row(Ebs14Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs14Row AddEbs14Row(long c_ArcId, string c_DescId, string c_For, System.Decimal c_Total) {
                Ebs14Row rowEbs14Row = ((Ebs14Row)(this.NewRow()));
                rowEbs14Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_For,
                        c_Total};
                this.Rows.Add(rowEbs14Row);
                return rowEbs14Row;
            }
            
            public Ebs14Row FindByc_ArcIdc_DescIdc_For(long c_ArcId, string c_DescId, string c_For) {
                return ((Ebs14Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_For})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs14DataTable cln = ((Ebs14DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs14DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_For = this.Columns["c_For"];
                this.columnc_Total = this.Columns["c_Total"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_For = new DataColumn("c_For", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_For);
                this.columnc_Total = new DataColumn("c_Total", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Total);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey3", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_For}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_For.AllowDBNull = false;
            }
            
            public Ebs14Row NewEbs14Row() {
                return ((Ebs14Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs14Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs14Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs14RowChanged != null)) {
                    this.Ebs14RowChanged(this, new Ebs14RowChangeEvent(((Ebs14Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs14RowChanging != null)) {
                    this.Ebs14RowChanging(this, new Ebs14RowChangeEvent(((Ebs14Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs14RowDeleted != null)) {
                    this.Ebs14RowDeleted(this, new Ebs14RowChangeEvent(((Ebs14Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs14RowDeleting != null)) {
                    this.Ebs14RowDeleting(this, new Ebs14RowChangeEvent(((Ebs14Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs14Row(Ebs14Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs14Row : DataRow {
            
            private Ebs14DataTable tableEbs14;
            
            internal Ebs14Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs14 = ((Ebs14DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs14.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs14.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs14.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs14.c_DescIdColumn] = value;
                }
            }
            
            public string c_For {
                get {
                    return ((string)(this[this.tableEbs14.c_ForColumn]));
                }
                set {
                    this[this.tableEbs14.c_ForColumn] = value;
                }
            }
            
            public System.Decimal c_Total {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableEbs14.c_TotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs14.c_TotalColumn] = value;
                }
            }
            
            public bool Isc_TotalNull() {
                return this.IsNull(this.tableEbs14.c_TotalColumn);
            }
            
            public void Setc_TotalNull() {
                this[this.tableEbs14.c_TotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs14RowChangeEvent : EventArgs {
            
            private Ebs14Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs14RowChangeEvent(Ebs14Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs14Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs15DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_YOB;
            
            private DataColumn columnc_Count;
            
            private DataColumn columnc_CountFe;
            
            internal Ebs15DataTable() : 
                    base("Ebs15") {
                this.InitClass();
            }
            
            internal Ebs15DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_YOBColumn {
                get {
                    return this.columnc_YOB;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            internal DataColumn c_CountFeColumn {
                get {
                    return this.columnc_CountFe;
                }
            }
            
            public Ebs15Row this[int index] {
                get {
                    return ((Ebs15Row)(this.Rows[index]));
                }
            }
            
            public event Ebs15RowChangeEventHandler Ebs15RowChanged;
            
            public event Ebs15RowChangeEventHandler Ebs15RowChanging;
            
            public event Ebs15RowChangeEventHandler Ebs15RowDeleted;
            
            public event Ebs15RowChangeEventHandler Ebs15RowDeleting;
            
            public void AddEbs15Row(Ebs15Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs15Row AddEbs15Row(long c_ArcId, string c_DescId, int c_YOB, int c_Count, int c_CountFe) {
                Ebs15Row rowEbs15Row = ((Ebs15Row)(this.NewRow()));
                rowEbs15Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_YOB,
                        c_Count,
                        c_CountFe};
                this.Rows.Add(rowEbs15Row);
                return rowEbs15Row;
            }
            
            public Ebs15Row FindByc_ArcIdc_DescIdc_YOB(long c_ArcId, string c_DescId, int c_YOB) {
                return ((Ebs15Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_YOB})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs15DataTable cln = ((Ebs15DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs15DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_YOB = this.Columns["c_YOB"];
                this.columnc_Count = this.Columns["c_Count"];
                this.columnc_CountFe = this.Columns["c_CountFe"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_YOB = new DataColumn("c_YOB", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_YOB);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.columnc_CountFe = new DataColumn("c_CountFe", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_CountFe);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey16", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_YOB}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_YOB.AllowDBNull = false;
            }
            
            public Ebs15Row NewEbs15Row() {
                return ((Ebs15Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs15Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs15Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs15RowChanged != null)) {
                    this.Ebs15RowChanged(this, new Ebs15RowChangeEvent(((Ebs15Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs15RowChanging != null)) {
                    this.Ebs15RowChanging(this, new Ebs15RowChangeEvent(((Ebs15Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs15RowDeleted != null)) {
                    this.Ebs15RowDeleted(this, new Ebs15RowChangeEvent(((Ebs15Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs15RowDeleting != null)) {
                    this.Ebs15RowDeleting(this, new Ebs15RowChangeEvent(((Ebs15Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs15Row(Ebs15Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs15Row : DataRow {
            
            private Ebs15DataTable tableEbs15;
            
            internal Ebs15Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs15 = ((Ebs15DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs15.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs15.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs15.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs15.c_DescIdColumn] = value;
                }
            }
            
            public int c_YOB {
                get {
                    return ((int)(this[this.tableEbs15.c_YOBColumn]));
                }
                set {
                    this[this.tableEbs15.c_YOBColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs15.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs15.c_CountColumn] = value;
                }
            }
            
            public int c_CountFe {
                get {
                    try {
                        return ((int)(this[this.tableEbs15.c_CountFeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs15.c_CountFeColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs15.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs15.c_CountColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CountFeNull() {
                return this.IsNull(this.tableEbs15.c_CountFeColumn);
            }
            
            public void Setc_CountFeNull() {
                this[this.tableEbs15.c_CountFeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs15RowChangeEvent : EventArgs {
            
            private Ebs15Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs15RowChangeEvent(Ebs15Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs15Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DescriptionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_Id;
            
            private DataColumn columnc_Desc;
            
            private DataColumn columnc_SheetCol;
            
            private DataColumn columnc_SheetRow;
            
            internal DescriptionDataTable() : 
                    base("Description") {
                this.InitClass();
            }
            
            internal DescriptionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_IdColumn {
                get {
                    return this.columnc_Id;
                }
            }
            
            internal DataColumn c_DescColumn {
                get {
                    return this.columnc_Desc;
                }
            }
            
            internal DataColumn c_SheetColColumn {
                get {
                    return this.columnc_SheetCol;
                }
            }
            
            internal DataColumn c_SheetRowColumn {
                get {
                    return this.columnc_SheetRow;
                }
            }
            
            public DescriptionRow this[int index] {
                get {
                    return ((DescriptionRow)(this.Rows[index]));
                }
            }
            
            public event DescriptionRowChangeEventHandler DescriptionRowChanged;
            
            public event DescriptionRowChangeEventHandler DescriptionRowChanging;
            
            public event DescriptionRowChangeEventHandler DescriptionRowDeleted;
            
            public event DescriptionRowChangeEventHandler DescriptionRowDeleting;
            
            public void AddDescriptionRow(DescriptionRow row) {
                this.Rows.Add(row);
            }
            
            public DescriptionRow AddDescriptionRow(string c_Id, string c_Desc, string c_SheetCol, int c_SheetRow) {
                DescriptionRow rowDescriptionRow = ((DescriptionRow)(this.NewRow()));
                rowDescriptionRow.ItemArray = new object[] {
                        c_Id,
                        c_Desc,
                        c_SheetCol,
                        c_SheetRow};
                this.Rows.Add(rowDescriptionRow);
                return rowDescriptionRow;
            }
            
            public DescriptionRow FindByc_Id(string c_Id) {
                return ((DescriptionRow)(this.Rows.Find(new object[] {
                            c_Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DescriptionDataTable cln = ((DescriptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DescriptionDataTable();
            }
            
            internal void InitVars() {
                this.columnc_Id = this.Columns["c_Id"];
                this.columnc_Desc = this.Columns["c_Desc"];
                this.columnc_SheetCol = this.Columns["c_SheetCol"];
                this.columnc_SheetRow = this.Columns["c_SheetRow"];
            }
            
            private void InitClass() {
                this.columnc_Id = new DataColumn("c_Id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Id);
                this.columnc_Desc = new DataColumn("c_Desc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Desc);
                this.columnc_SheetCol = new DataColumn("c_SheetCol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_SheetCol);
                this.columnc_SheetRow = new DataColumn("c_SheetRow", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_SheetRow);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey1", new DataColumn[] {
                                this.columnc_Id}, true));
                this.columnc_Id.AllowDBNull = false;
                this.columnc_Id.Unique = true;
            }
            
            public DescriptionRow NewDescriptionRow() {
                return ((DescriptionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DescriptionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DescriptionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DescriptionRowChanged != null)) {
                    this.DescriptionRowChanged(this, new DescriptionRowChangeEvent(((DescriptionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DescriptionRowChanging != null)) {
                    this.DescriptionRowChanging(this, new DescriptionRowChangeEvent(((DescriptionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DescriptionRowDeleted != null)) {
                    this.DescriptionRowDeleted(this, new DescriptionRowChangeEvent(((DescriptionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DescriptionRowDeleting != null)) {
                    this.DescriptionRowDeleting(this, new DescriptionRowChangeEvent(((DescriptionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDescriptionRow(DescriptionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DescriptionRow : DataRow {
            
            private DescriptionDataTable tableDescription;
            
            internal DescriptionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDescription = ((DescriptionDataTable)(this.Table));
            }
            
            public string c_Id {
                get {
                    return ((string)(this[this.tableDescription.c_IdColumn]));
                }
                set {
                    this[this.tableDescription.c_IdColumn] = value;
                }
            }
            
            public string c_Desc {
                get {
                    try {
                        return ((string)(this[this.tableDescription.c_DescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDescription.c_DescColumn] = value;
                }
            }
            
            public string c_SheetCol {
                get {
                    try {
                        return ((string)(this[this.tableDescription.c_SheetColColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDescription.c_SheetColColumn] = value;
                }
            }
            
            public int c_SheetRow {
                get {
                    try {
                        return ((int)(this[this.tableDescription.c_SheetRowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDescription.c_SheetRowColumn] = value;
                }
            }
            
            public bool Isc_DescNull() {
                return this.IsNull(this.tableDescription.c_DescColumn);
            }
            
            public void Setc_DescNull() {
                this[this.tableDescription.c_DescColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_SheetColNull() {
                return this.IsNull(this.tableDescription.c_SheetColColumn);
            }
            
            public void Setc_SheetColNull() {
                this[this.tableDescription.c_SheetColColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_SheetRowNull() {
                return this.IsNull(this.tableDescription.c_SheetRowColumn);
            }
            
            public void Setc_SheetRowNull() {
                this[this.tableDescription.c_SheetRowColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DescriptionRowChangeEvent : EventArgs {
            
            private DescriptionRow eventRow;
            
            private DataRowAction eventAction;
            
            public DescriptionRowChangeEvent(DescriptionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DescriptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs11DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_DescId;
            
            private DataColumn columnc_Col;
            
            private DataColumn columnc_Count;
            
            internal Ebs11DataTable() : 
                    base("Ebs11") {
                this.InitClass();
            }
            
            internal Ebs11DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescIdColumn {
                get {
                    return this.columnc_DescId;
                }
            }
            
            internal DataColumn c_ColColumn {
                get {
                    return this.columnc_Col;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            public Ebs11Row this[int index] {
                get {
                    return ((Ebs11Row)(this.Rows[index]));
                }
            }
            
            public event Ebs11RowChangeEventHandler Ebs11RowChanged;
            
            public event Ebs11RowChangeEventHandler Ebs11RowChanging;
            
            public event Ebs11RowChangeEventHandler Ebs11RowDeleted;
            
            public event Ebs11RowChangeEventHandler Ebs11RowDeleting;
            
            public void AddEbs11Row(Ebs11Row row) {
                this.Rows.Add(row);
            }
            
            public Ebs11Row AddEbs11Row(long c_ArcId, string c_DescId, string c_Col, int c_Count) {
                Ebs11Row rowEbs11Row = ((Ebs11Row)(this.NewRow()));
                rowEbs11Row.ItemArray = new object[] {
                        c_ArcId,
                        c_DescId,
                        c_Col,
                        c_Count};
                this.Rows.Add(rowEbs11Row);
                return rowEbs11Row;
            }
            
            public Ebs11Row FindByc_ArcIdc_DescIdc_Col(long c_ArcId, string c_DescId, string c_Col) {
                return ((Ebs11Row)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_DescId,
                            c_Col})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Ebs11DataTable cln = ((Ebs11DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Ebs11DataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_DescId = this.Columns["c_DescId"];
                this.columnc_Col = this.Columns["c_Col"];
                this.columnc_Count = this.Columns["c_Count"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_DescId = new DataColumn("c_DescId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_DescId);
                this.columnc_Col = new DataColumn("c_Col", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Col);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey14", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_DescId,
                                this.columnc_Col}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_DescId.AllowDBNull = false;
                this.columnc_Col.AllowDBNull = false;
            }
            
            public Ebs11Row NewEbs11Row() {
                return ((Ebs11Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Ebs11Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Ebs11Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Ebs11RowChanged != null)) {
                    this.Ebs11RowChanged(this, new Ebs11RowChangeEvent(((Ebs11Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Ebs11RowChanging != null)) {
                    this.Ebs11RowChanging(this, new Ebs11RowChangeEvent(((Ebs11Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Ebs11RowDeleted != null)) {
                    this.Ebs11RowDeleted(this, new Ebs11RowChangeEvent(((Ebs11Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Ebs11RowDeleting != null)) {
                    this.Ebs11RowDeleting(this, new Ebs11RowChangeEvent(((Ebs11Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbs11Row(Ebs11Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs11Row : DataRow {
            
            private Ebs11DataTable tableEbs11;
            
            internal Ebs11Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbs11 = ((Ebs11DataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbs11.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbs11.c_ArcIdColumn] = value;
                }
            }
            
            public string c_DescId {
                get {
                    return ((string)(this[this.tableEbs11.c_DescIdColumn]));
                }
                set {
                    this[this.tableEbs11.c_DescIdColumn] = value;
                }
            }
            
            public string c_Col {
                get {
                    return ((string)(this[this.tableEbs11.c_ColColumn]));
                }
                set {
                    this[this.tableEbs11.c_ColColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEbs11.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbs11.c_CountColumn] = value;
                }
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEbs11.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEbs11.c_CountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Ebs11RowChangeEvent : EventArgs {
            
            private Ebs11Row eventRow;
            
            private DataRowAction eventAction;
            
            public Ebs11RowChangeEvent(Ebs11Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Ebs11Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SchoolDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_Sid;
            
            private DataColumn columnc_Rid;
            
            private DataColumn columnc_Name;
            
            private DataColumn columnc_Type;
            
            private DataColumn columnc_Special;
            
            private DataColumn columnc_IsBranch;
            
            private DataColumn columnc_Note;
            
            internal SchoolDataTable() : 
                    base("School") {
                this.InitClass();
            }
            
            internal SchoolDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_SidColumn {
                get {
                    return this.columnc_Sid;
                }
            }
            
            internal DataColumn c_RidColumn {
                get {
                    return this.columnc_Rid;
                }
            }
            
            internal DataColumn c_NameColumn {
                get {
                    return this.columnc_Name;
                }
            }
            
            internal DataColumn c_TypeColumn {
                get {
                    return this.columnc_Type;
                }
            }
            
            internal DataColumn c_SpecialColumn {
                get {
                    return this.columnc_Special;
                }
            }
            
            internal DataColumn c_IsBranchColumn {
                get {
                    return this.columnc_IsBranch;
                }
            }
            
            internal DataColumn c_NoteColumn {
                get {
                    return this.columnc_Note;
                }
            }
            
            public SchoolRow this[int index] {
                get {
                    return ((SchoolRow)(this.Rows[index]));
                }
            }
            
            public event SchoolRowChangeEventHandler SchoolRowChanged;
            
            public event SchoolRowChangeEventHandler SchoolRowChanging;
            
            public event SchoolRowChangeEventHandler SchoolRowDeleted;
            
            public event SchoolRowChangeEventHandler SchoolRowDeleting;
            
            public void AddSchoolRow(SchoolRow row) {
                this.Rows.Add(row);
            }
            
            public SchoolRow AddSchoolRow(int c_Sid, int c_Rid, string c_Name, string c_Type, string c_Special, bool c_IsBranch, string c_Note) {
                SchoolRow rowSchoolRow = ((SchoolRow)(this.NewRow()));
                rowSchoolRow.ItemArray = new object[] {
                        c_Sid,
                        c_Rid,
                        c_Name,
                        c_Type,
                        c_Special,
                        c_IsBranch,
                        c_Note};
                this.Rows.Add(rowSchoolRow);
                return rowSchoolRow;
            }
            
            public SchoolRow FindByc_Sid(int c_Sid) {
                return ((SchoolRow)(this.Rows.Find(new object[] {
                            c_Sid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SchoolDataTable cln = ((SchoolDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SchoolDataTable();
            }
            
            internal void InitVars() {
                this.columnc_Sid = this.Columns["c_Sid"];
                this.columnc_Rid = this.Columns["c_Rid"];
                this.columnc_Name = this.Columns["c_Name"];
                this.columnc_Type = this.Columns["c_Type"];
                this.columnc_Special = this.Columns["c_Special"];
                this.columnc_IsBranch = this.Columns["c_IsBranch"];
                this.columnc_Note = this.Columns["c_Note"];
            }
            
            private void InitClass() {
                this.columnc_Sid = new DataColumn("c_Sid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Sid);
                this.columnc_Rid = new DataColumn("c_Rid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Rid);
                this.columnc_Name = new DataColumn("c_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Name);
                this.columnc_Type = new DataColumn("c_Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Type);
                this.columnc_Special = new DataColumn("c_Special", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Special);
                this.columnc_IsBranch = new DataColumn("c_IsBranch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_IsBranch);
                this.columnc_Note = new DataColumn("c_Note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Note);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey17", new DataColumn[] {
                                this.columnc_Sid}, true));
                this.columnc_Sid.AllowDBNull = false;
                this.columnc_Sid.Unique = true;
                this.columnc_Rid.AllowDBNull = false;
                this.columnc_Name.AllowDBNull = false;
                this.columnc_Type.AllowDBNull = false;
                this.columnc_Special.AllowDBNull = false;
            }
            
            public SchoolRow NewSchoolRow() {
                return ((SchoolRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SchoolRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SchoolRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchoolRowChanged != null)) {
                    this.SchoolRowChanged(this, new SchoolRowChangeEvent(((SchoolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchoolRowChanging != null)) {
                    this.SchoolRowChanging(this, new SchoolRowChangeEvent(((SchoolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchoolRowDeleted != null)) {
                    this.SchoolRowDeleted(this, new SchoolRowChangeEvent(((SchoolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchoolRowDeleting != null)) {
                    this.SchoolRowDeleting(this, new SchoolRowChangeEvent(((SchoolRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSchoolRow(SchoolRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SchoolRow : DataRow {
            
            private SchoolDataTable tableSchool;
            
            internal SchoolRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchool = ((SchoolDataTable)(this.Table));
            }
            
            public int c_Sid {
                get {
                    return ((int)(this[this.tableSchool.c_SidColumn]));
                }
                set {
                    this[this.tableSchool.c_SidColumn] = value;
                }
            }
            
            public int c_Rid {
                get {
                    return ((int)(this[this.tableSchool.c_RidColumn]));
                }
                set {
                    this[this.tableSchool.c_RidColumn] = value;
                }
            }
            
            public string c_Name {
                get {
                    return ((string)(this[this.tableSchool.c_NameColumn]));
                }
                set {
                    this[this.tableSchool.c_NameColumn] = value;
                }
            }
            
            public string c_Type {
                get {
                    return ((string)(this[this.tableSchool.c_TypeColumn]));
                }
                set {
                    this[this.tableSchool.c_TypeColumn] = value;
                }
            }
            
            public string c_Special {
                get {
                    return ((string)(this[this.tableSchool.c_SpecialColumn]));
                }
                set {
                    this[this.tableSchool.c_SpecialColumn] = value;
                }
            }
            
            public bool c_IsBranch {
                get {
                    try {
                        return ((bool)(this[this.tableSchool.c_IsBranchColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchool.c_IsBranchColumn] = value;
                }
            }
            
            public string c_Note {
                get {
                    try {
                        return ((string)(this[this.tableSchool.c_NoteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSchool.c_NoteColumn] = value;
                }
            }
            
            public bool Isc_IsBranchNull() {
                return this.IsNull(this.tableSchool.c_IsBranchColumn);
            }
            
            public void Setc_IsBranchNull() {
                this[this.tableSchool.c_IsBranchColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_NoteNull() {
                return this.IsNull(this.tableSchool.c_NoteColumn);
            }
            
            public void Setc_NoteNull() {
                this[this.tableSchool.c_NoteColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SchoolRowChangeEvent : EventArgs {
            
            private SchoolRow eventRow;
            
            private DataRowAction eventAction;
            
            public SchoolRowChangeEvent(SchoolRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SchoolRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeacherDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_Name;
            
            private DataColumn columnc_Age;
            
            private DataColumn columnc_Sex;
            
            private DataColumn columnc_RegNo;
            
            private DataColumn columnc_FamilyMembers;
            
            private DataColumn columnc_Prof;
            
            private DataColumn columnc_Position;
            
            private DataColumn columnc_Degree;
            
            private DataColumn columnc_ProfDegree;
            
            private DataColumn columnc_Education;
            
            private DataColumn columnc_WorkedYear;
            
            internal TeacherDataTable() : 
                    base("Teacher") {
                this.InitClass();
            }
            
            internal TeacherDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_NameColumn {
                get {
                    return this.columnc_Name;
                }
            }
            
            internal DataColumn c_AgeColumn {
                get {
                    return this.columnc_Age;
                }
            }
            
            internal DataColumn c_SexColumn {
                get {
                    return this.columnc_Sex;
                }
            }
            
            internal DataColumn c_RegNoColumn {
                get {
                    return this.columnc_RegNo;
                }
            }
            
            internal DataColumn c_FamilyMembersColumn {
                get {
                    return this.columnc_FamilyMembers;
                }
            }
            
            internal DataColumn c_ProfColumn {
                get {
                    return this.columnc_Prof;
                }
            }
            
            internal DataColumn c_PositionColumn {
                get {
                    return this.columnc_Position;
                }
            }
            
            internal DataColumn c_DegreeColumn {
                get {
                    return this.columnc_Degree;
                }
            }
            
            internal DataColumn c_ProfDegreeColumn {
                get {
                    return this.columnc_ProfDegree;
                }
            }
            
            internal DataColumn c_EducationColumn {
                get {
                    return this.columnc_Education;
                }
            }
            
            internal DataColumn c_WorkedYearColumn {
                get {
                    return this.columnc_WorkedYear;
                }
            }
            
            public TeacherRow this[int index] {
                get {
                    return ((TeacherRow)(this.Rows[index]));
                }
            }
            
            public event TeacherRowChangeEventHandler TeacherRowChanged;
            
            public event TeacherRowChangeEventHandler TeacherRowChanging;
            
            public event TeacherRowChangeEventHandler TeacherRowDeleted;
            
            public event TeacherRowChangeEventHandler TeacherRowDeleting;
            
            public void AddTeacherRow(TeacherRow row) {
                this.Rows.Add(row);
            }
            
            public TeacherRow AddTeacherRow(long c_ArcId, string c_Name, System.Byte c_Age, string c_Sex, string c_RegNo, int c_FamilyMembers, string c_Prof, string c_Position, string c_Degree, string c_ProfDegree, string c_Education, int c_WorkedYear) {
                TeacherRow rowTeacherRow = ((TeacherRow)(this.NewRow()));
                rowTeacherRow.ItemArray = new object[] {
                        c_ArcId,
                        c_Name,
                        c_Age,
                        c_Sex,
                        c_RegNo,
                        c_FamilyMembers,
                        c_Prof,
                        c_Position,
                        c_Degree,
                        c_ProfDegree,
                        c_Education,
                        c_WorkedYear};
                this.Rows.Add(rowTeacherRow);
                return rowTeacherRow;
            }
            
            public TeacherRow FindByc_ArcIdc_Name(long c_ArcId, string c_Name) {
                return ((TeacherRow)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_Name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TeacherDataTable cln = ((TeacherDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TeacherDataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_Name = this.Columns["c_Name"];
                this.columnc_Age = this.Columns["c_Age"];
                this.columnc_Sex = this.Columns["c_Sex"];
                this.columnc_RegNo = this.Columns["c_RegNo"];
                this.columnc_FamilyMembers = this.Columns["c_FamilyMembers"];
                this.columnc_Prof = this.Columns["c_Prof"];
                this.columnc_Position = this.Columns["c_Position"];
                this.columnc_Degree = this.Columns["c_Degree"];
                this.columnc_ProfDegree = this.Columns["c_ProfDegree"];
                this.columnc_Education = this.Columns["c_Education"];
                this.columnc_WorkedYear = this.Columns["c_WorkedYear"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_Name = new DataColumn("c_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Name);
                this.columnc_Age = new DataColumn("c_Age", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Age);
                this.columnc_Sex = new DataColumn("c_Sex", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Sex);
                this.columnc_RegNo = new DataColumn("c_RegNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_RegNo);
                this.columnc_FamilyMembers = new DataColumn("c_FamilyMembers", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_FamilyMembers);
                this.columnc_Prof = new DataColumn("c_Prof", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Prof);
                this.columnc_Position = new DataColumn("c_Position", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Position);
                this.columnc_Degree = new DataColumn("c_Degree", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Degree);
                this.columnc_ProfDegree = new DataColumn("c_ProfDegree", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ProfDegree);
                this.columnc_Education = new DataColumn("c_Education", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Education);
                this.columnc_WorkedYear = new DataColumn("c_WorkedYear", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_WorkedYear);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey19", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_Name}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_Name.AllowDBNull = false;
            }
            
            public TeacherRow NewTeacherRow() {
                return ((TeacherRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TeacherRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TeacherRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TeacherRowChanged != null)) {
                    this.TeacherRowChanged(this, new TeacherRowChangeEvent(((TeacherRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TeacherRowChanging != null)) {
                    this.TeacherRowChanging(this, new TeacherRowChangeEvent(((TeacherRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TeacherRowDeleted != null)) {
                    this.TeacherRowDeleted(this, new TeacherRowChangeEvent(((TeacherRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TeacherRowDeleting != null)) {
                    this.TeacherRowDeleting(this, new TeacherRowChangeEvent(((TeacherRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTeacherRow(TeacherRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeacherRow : DataRow {
            
            private TeacherDataTable tableTeacher;
            
            internal TeacherRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTeacher = ((TeacherDataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableTeacher.c_ArcIdColumn]));
                }
                set {
                    this[this.tableTeacher.c_ArcIdColumn] = value;
                }
            }
            
            public string c_Name {
                get {
                    return ((string)(this[this.tableTeacher.c_NameColumn]));
                }
                set {
                    this[this.tableTeacher.c_NameColumn] = value;
                }
            }
            
            public System.Byte c_Age {
                get {
                    try {
                        return ((System.Byte)(this[this.tableTeacher.c_AgeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_AgeColumn] = value;
                }
            }
            
            public string c_Sex {
                get {
                    try {
                        return ((string)(this[this.tableTeacher.c_SexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_SexColumn] = value;
                }
            }
            
            public string c_RegNo {
                get {
                    try {
                        return ((string)(this[this.tableTeacher.c_RegNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_RegNoColumn] = value;
                }
            }
            
            public int c_FamilyMembers {
                get {
                    try {
                        return ((int)(this[this.tableTeacher.c_FamilyMembersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_FamilyMembersColumn] = value;
                }
            }
            
            public string c_Prof {
                get {
                    try {
                        return ((string)(this[this.tableTeacher.c_ProfColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_ProfColumn] = value;
                }
            }
            
            public string c_Position {
                get {
                    try {
                        return ((string)(this[this.tableTeacher.c_PositionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_PositionColumn] = value;
                }
            }
            
            public string c_Degree {
                get {
                    try {
                        return ((string)(this[this.tableTeacher.c_DegreeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_DegreeColumn] = value;
                }
            }
            
            public string c_ProfDegree {
                get {
                    try {
                        return ((string)(this[this.tableTeacher.c_ProfDegreeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_ProfDegreeColumn] = value;
                }
            }
            
            public string c_Education {
                get {
                    try {
                        return ((string)(this[this.tableTeacher.c_EducationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_EducationColumn] = value;
                }
            }
            
            public int c_WorkedYear {
                get {
                    try {
                        return ((int)(this[this.tableTeacher.c_WorkedYearColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeacher.c_WorkedYearColumn] = value;
                }
            }
            
            public bool Isc_AgeNull() {
                return this.IsNull(this.tableTeacher.c_AgeColumn);
            }
            
            public void Setc_AgeNull() {
                this[this.tableTeacher.c_AgeColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_SexNull() {
                return this.IsNull(this.tableTeacher.c_SexColumn);
            }
            
            public void Setc_SexNull() {
                this[this.tableTeacher.c_SexColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_RegNoNull() {
                return this.IsNull(this.tableTeacher.c_RegNoColumn);
            }
            
            public void Setc_RegNoNull() {
                this[this.tableTeacher.c_RegNoColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_FamilyMembersNull() {
                return this.IsNull(this.tableTeacher.c_FamilyMembersColumn);
            }
            
            public void Setc_FamilyMembersNull() {
                this[this.tableTeacher.c_FamilyMembersColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_ProfNull() {
                return this.IsNull(this.tableTeacher.c_ProfColumn);
            }
            
            public void Setc_ProfNull() {
                this[this.tableTeacher.c_ProfColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_PositionNull() {
                return this.IsNull(this.tableTeacher.c_PositionColumn);
            }
            
            public void Setc_PositionNull() {
                this[this.tableTeacher.c_PositionColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_DegreeNull() {
                return this.IsNull(this.tableTeacher.c_DegreeColumn);
            }
            
            public void Setc_DegreeNull() {
                this[this.tableTeacher.c_DegreeColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_ProfDegreeNull() {
                return this.IsNull(this.tableTeacher.c_ProfDegreeColumn);
            }
            
            public void Setc_ProfDegreeNull() {
                this[this.tableTeacher.c_ProfDegreeColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_EducationNull() {
                return this.IsNull(this.tableTeacher.c_EducationColumn);
            }
            
            public void Setc_EducationNull() {
                this[this.tableTeacher.c_EducationColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_WorkedYearNull() {
                return this.IsNull(this.tableTeacher.c_WorkedYearColumn);
            }
            
            public void Setc_WorkedYearNull() {
                this[this.tableTeacher.c_WorkedYearColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeacherRowChangeEvent : EventArgs {
            
            private TeacherRow eventRow;
            
            private DataRowAction eventAction;
            
            public TeacherRowChangeEvent(TeacherRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TeacherRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_Building;
            
            private DataColumn columnc_Desc;
            
            private DataColumn columnc_BuildYear;
            
            private DataColumn columnc_Cardinality;
            
            private DataColumn columnc_RoomCount;
            
            private DataColumn columnc_Quality;
            
            private DataColumn columnc_Cost;
            
            private DataColumn columnc_Available;
            
            private DataColumn columnc_UsingByDesc;
            
            private DataColumn columnc_HeatingType;
            
            private DataColumn columnc_HeatingCapacity;
            
            private DataColumn columnc_NECapable;
            
            private DataColumn columnc_UsableInWinter;
            
            private DataColumn columnc_RepairNeed;
            
            private DataColumn columnc_RepairCost;
            
            internal BuildingDataTable() : 
                    base("Building") {
                this.InitClass();
            }
            
            internal BuildingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_BuildingColumn {
                get {
                    return this.columnc_Building;
                }
            }
            
            internal DataColumn c_DescColumn {
                get {
                    return this.columnc_Desc;
                }
            }
            
            internal DataColumn c_BuildYearColumn {
                get {
                    return this.columnc_BuildYear;
                }
            }
            
            internal DataColumn c_CardinalityColumn {
                get {
                    return this.columnc_Cardinality;
                }
            }
            
            internal DataColumn c_RoomCountColumn {
                get {
                    return this.columnc_RoomCount;
                }
            }
            
            internal DataColumn c_QualityColumn {
                get {
                    return this.columnc_Quality;
                }
            }
            
            internal DataColumn c_CostColumn {
                get {
                    return this.columnc_Cost;
                }
            }
            
            internal DataColumn c_AvailableColumn {
                get {
                    return this.columnc_Available;
                }
            }
            
            internal DataColumn c_UsingByDescColumn {
                get {
                    return this.columnc_UsingByDesc;
                }
            }
            
            internal DataColumn c_HeatingTypeColumn {
                get {
                    return this.columnc_HeatingType;
                }
            }
            
            internal DataColumn c_HeatingCapacityColumn {
                get {
                    return this.columnc_HeatingCapacity;
                }
            }
            
            internal DataColumn c_NECapableColumn {
                get {
                    return this.columnc_NECapable;
                }
            }
            
            internal DataColumn c_UsableInWinterColumn {
                get {
                    return this.columnc_UsableInWinter;
                }
            }
            
            internal DataColumn c_RepairNeedColumn {
                get {
                    return this.columnc_RepairNeed;
                }
            }
            
            internal DataColumn c_RepairCostColumn {
                get {
                    return this.columnc_RepairCost;
                }
            }
            
            public BuildingRow this[int index] {
                get {
                    return ((BuildingRow)(this.Rows[index]));
                }
            }
            
            public event BuildingRowChangeEventHandler BuildingRowChanged;
            
            public event BuildingRowChangeEventHandler BuildingRowChanging;
            
            public event BuildingRowChangeEventHandler BuildingRowDeleted;
            
            public event BuildingRowChangeEventHandler BuildingRowDeleting;
            
            public void AddBuildingRow(BuildingRow row) {
                this.Rows.Add(row);
            }
            
            public BuildingRow AddBuildingRow(
                        long c_ArcId, 
                        string c_Building, 
                        string c_Desc, 
                        int c_BuildYear, 
                        int c_Cardinality, 
                        int c_RoomCount, 
                        string c_Quality, 
                        System.Decimal c_Cost, 
                        bool c_Available, 
                        bool c_UsingByDesc, 
                        string c_HeatingType, 
                        System.Single c_HeatingCapacity, 
                        bool c_NECapable, 
                        bool c_UsableInWinter, 
                        bool c_RepairNeed, 
                        System.Decimal c_RepairCost) {
                BuildingRow rowBuildingRow = ((BuildingRow)(this.NewRow()));
                rowBuildingRow.ItemArray = new object[] {
                        c_ArcId,
                        c_Building,
                        c_Desc,
                        c_BuildYear,
                        c_Cardinality,
                        c_RoomCount,
                        c_Quality,
                        c_Cost,
                        c_Available,
                        c_UsingByDesc,
                        c_HeatingType,
                        c_HeatingCapacity,
                        c_NECapable,
                        c_UsableInWinter,
                        c_RepairNeed,
                        c_RepairCost};
                this.Rows.Add(rowBuildingRow);
                return rowBuildingRow;
            }
            
            public BuildingRow FindByc_ArcIdc_Building(long c_ArcId, string c_Building) {
                return ((BuildingRow)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_Building})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BuildingDataTable cln = ((BuildingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BuildingDataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_Building = this.Columns["c_Building"];
                this.columnc_Desc = this.Columns["c_Desc"];
                this.columnc_BuildYear = this.Columns["c_BuildYear"];
                this.columnc_Cardinality = this.Columns["c_Cardinality"];
                this.columnc_RoomCount = this.Columns["c_RoomCount"];
                this.columnc_Quality = this.Columns["c_Quality"];
                this.columnc_Cost = this.Columns["c_Cost"];
                this.columnc_Available = this.Columns["c_Available"];
                this.columnc_UsingByDesc = this.Columns["c_UsingByDesc"];
                this.columnc_HeatingType = this.Columns["c_HeatingType"];
                this.columnc_HeatingCapacity = this.Columns["c_HeatingCapacity"];
                this.columnc_NECapable = this.Columns["c_NECapable"];
                this.columnc_UsableInWinter = this.Columns["c_UsableInWinter"];
                this.columnc_RepairNeed = this.Columns["c_RepairNeed"];
                this.columnc_RepairCost = this.Columns["c_RepairCost"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_Building = new DataColumn("c_Building", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Building);
                this.columnc_Desc = new DataColumn("c_Desc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Desc);
                this.columnc_BuildYear = new DataColumn("c_BuildYear", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_BuildYear);
                this.columnc_Cardinality = new DataColumn("c_Cardinality", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Cardinality);
                this.columnc_RoomCount = new DataColumn("c_RoomCount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_RoomCount);
                this.columnc_Quality = new DataColumn("c_Quality", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Quality);
                this.columnc_Cost = new DataColumn("c_Cost", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Cost);
                this.columnc_Available = new DataColumn("c_Available", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Available);
                this.columnc_UsingByDesc = new DataColumn("c_UsingByDesc", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_UsingByDesc);
                this.columnc_HeatingType = new DataColumn("c_HeatingType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_HeatingType);
                this.columnc_HeatingCapacity = new DataColumn("c_HeatingCapacity", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_HeatingCapacity);
                this.columnc_NECapable = new DataColumn("c_NECapable", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_NECapable);
                this.columnc_UsableInWinter = new DataColumn("c_UsableInWinter", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_UsableInWinter);
                this.columnc_RepairNeed = new DataColumn("c_RepairNeed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_RepairNeed);
                this.columnc_RepairCost = new DataColumn("c_RepairCost", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_RepairCost);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey18", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_Building}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_Building.AllowDBNull = false;
            }
            
            public BuildingRow NewBuildingRow() {
                return ((BuildingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BuildingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BuildingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BuildingRowChanged != null)) {
                    this.BuildingRowChanged(this, new BuildingRowChangeEvent(((BuildingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BuildingRowChanging != null)) {
                    this.BuildingRowChanging(this, new BuildingRowChangeEvent(((BuildingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BuildingRowDeleted != null)) {
                    this.BuildingRowDeleted(this, new BuildingRowChangeEvent(((BuildingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BuildingRowDeleting != null)) {
                    this.BuildingRowDeleting(this, new BuildingRowChangeEvent(((BuildingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBuildingRow(BuildingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildingRow : DataRow {
            
            private BuildingDataTable tableBuilding;
            
            internal BuildingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBuilding = ((BuildingDataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableBuilding.c_ArcIdColumn]));
                }
                set {
                    this[this.tableBuilding.c_ArcIdColumn] = value;
                }
            }
            
            public string c_Building {
                get {
                    return ((string)(this[this.tableBuilding.c_BuildingColumn]));
                }
                set {
                    this[this.tableBuilding.c_BuildingColumn] = value;
                }
            }
            
            public string c_Desc {
                get {
                    try {
                        return ((string)(this[this.tableBuilding.c_DescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_DescColumn] = value;
                }
            }
            
            public int c_BuildYear {
                get {
                    try {
                        return ((int)(this[this.tableBuilding.c_BuildYearColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_BuildYearColumn] = value;
                }
            }
            
            public int c_Cardinality {
                get {
                    try {
                        return ((int)(this[this.tableBuilding.c_CardinalityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_CardinalityColumn] = value;
                }
            }
            
            public int c_RoomCount {
                get {
                    try {
                        return ((int)(this[this.tableBuilding.c_RoomCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_RoomCountColumn] = value;
                }
            }
            
            public string c_Quality {
                get {
                    try {
                        return ((string)(this[this.tableBuilding.c_QualityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_QualityColumn] = value;
                }
            }
            
            public System.Decimal c_Cost {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBuilding.c_CostColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_CostColumn] = value;
                }
            }
            
            public bool c_Available {
                get {
                    try {
                        return ((bool)(this[this.tableBuilding.c_AvailableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_AvailableColumn] = value;
                }
            }
            
            public bool c_UsingByDesc {
                get {
                    try {
                        return ((bool)(this[this.tableBuilding.c_UsingByDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_UsingByDescColumn] = value;
                }
            }
            
            public string c_HeatingType {
                get {
                    try {
                        return ((string)(this[this.tableBuilding.c_HeatingTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_HeatingTypeColumn] = value;
                }
            }
            
            public System.Single c_HeatingCapacity {
                get {
                    try {
                        return ((System.Single)(this[this.tableBuilding.c_HeatingCapacityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_HeatingCapacityColumn] = value;
                }
            }
            
            public bool c_NECapable {
                get {
                    try {
                        return ((bool)(this[this.tableBuilding.c_NECapableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_NECapableColumn] = value;
                }
            }
            
            public bool c_UsableInWinter {
                get {
                    try {
                        return ((bool)(this[this.tableBuilding.c_UsableInWinterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_UsableInWinterColumn] = value;
                }
            }
            
            public bool c_RepairNeed {
                get {
                    try {
                        return ((bool)(this[this.tableBuilding.c_RepairNeedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_RepairNeedColumn] = value;
                }
            }
            
            public System.Decimal c_RepairCost {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableBuilding.c_RepairCostColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuilding.c_RepairCostColumn] = value;
                }
            }
            
            public bool Isc_DescNull() {
                return this.IsNull(this.tableBuilding.c_DescColumn);
            }
            
            public void Setc_DescNull() {
                this[this.tableBuilding.c_DescColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_BuildYearNull() {
                return this.IsNull(this.tableBuilding.c_BuildYearColumn);
            }
            
            public void Setc_BuildYearNull() {
                this[this.tableBuilding.c_BuildYearColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CardinalityNull() {
                return this.IsNull(this.tableBuilding.c_CardinalityColumn);
            }
            
            public void Setc_CardinalityNull() {
                this[this.tableBuilding.c_CardinalityColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_RoomCountNull() {
                return this.IsNull(this.tableBuilding.c_RoomCountColumn);
            }
            
            public void Setc_RoomCountNull() {
                this[this.tableBuilding.c_RoomCountColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_QualityNull() {
                return this.IsNull(this.tableBuilding.c_QualityColumn);
            }
            
            public void Setc_QualityNull() {
                this[this.tableBuilding.c_QualityColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CostNull() {
                return this.IsNull(this.tableBuilding.c_CostColumn);
            }
            
            public void Setc_CostNull() {
                this[this.tableBuilding.c_CostColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_AvailableNull() {
                return this.IsNull(this.tableBuilding.c_AvailableColumn);
            }
            
            public void Setc_AvailableNull() {
                this[this.tableBuilding.c_AvailableColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_UsingByDescNull() {
                return this.IsNull(this.tableBuilding.c_UsingByDescColumn);
            }
            
            public void Setc_UsingByDescNull() {
                this[this.tableBuilding.c_UsingByDescColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_HeatingTypeNull() {
                return this.IsNull(this.tableBuilding.c_HeatingTypeColumn);
            }
            
            public void Setc_HeatingTypeNull() {
                this[this.tableBuilding.c_HeatingTypeColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_HeatingCapacityNull() {
                return this.IsNull(this.tableBuilding.c_HeatingCapacityColumn);
            }
            
            public void Setc_HeatingCapacityNull() {
                this[this.tableBuilding.c_HeatingCapacityColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_NECapableNull() {
                return this.IsNull(this.tableBuilding.c_NECapableColumn);
            }
            
            public void Setc_NECapableNull() {
                this[this.tableBuilding.c_NECapableColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_UsableInWinterNull() {
                return this.IsNull(this.tableBuilding.c_UsableInWinterColumn);
            }
            
            public void Setc_UsableInWinterNull() {
                this[this.tableBuilding.c_UsableInWinterColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_RepairNeedNull() {
                return this.IsNull(this.tableBuilding.c_RepairNeedColumn);
            }
            
            public void Setc_RepairNeedNull() {
                this[this.tableBuilding.c_RepairNeedColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_RepairCostNull() {
                return this.IsNull(this.tableBuilding.c_RepairCostColumn);
            }
            
            public void Setc_RepairCostNull() {
                this[this.tableBuilding.c_RepairCostColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildingRowChangeEvent : EventArgs {
            
            private BuildingRow eventRow;
            
            private DataRowAction eventAction;
            
            public BuildingRowChangeEvent(BuildingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BuildingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquipmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_Equipment;
            
            private DataColumn columnc_Type;
            
            private DataColumn columnc_Count;
            
            private DataColumn columnc_AvailableCount;
            
            private DataColumn columnc_Cost;
            
            internal EquipmentDataTable() : 
                    base("Equipment") {
                this.InitClass();
            }
            
            internal EquipmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_EquipmentColumn {
                get {
                    return this.columnc_Equipment;
                }
            }
            
            internal DataColumn c_TypeColumn {
                get {
                    return this.columnc_Type;
                }
            }
            
            internal DataColumn c_CountColumn {
                get {
                    return this.columnc_Count;
                }
            }
            
            internal DataColumn c_AvailableCountColumn {
                get {
                    return this.columnc_AvailableCount;
                }
            }
            
            internal DataColumn c_CostColumn {
                get {
                    return this.columnc_Cost;
                }
            }
            
            public EquipmentRow this[int index] {
                get {
                    return ((EquipmentRow)(this.Rows[index]));
                }
            }
            
            public event EquipmentRowChangeEventHandler EquipmentRowChanged;
            
            public event EquipmentRowChangeEventHandler EquipmentRowChanging;
            
            public event EquipmentRowChangeEventHandler EquipmentRowDeleted;
            
            public event EquipmentRowChangeEventHandler EquipmentRowDeleting;
            
            public void AddEquipmentRow(EquipmentRow row) {
                this.Rows.Add(row);
            }
            
            public EquipmentRow AddEquipmentRow(long c_ArcId, string c_Equipment, string c_Type, int c_Count, int c_AvailableCount, System.Decimal c_Cost) {
                EquipmentRow rowEquipmentRow = ((EquipmentRow)(this.NewRow()));
                rowEquipmentRow.ItemArray = new object[] {
                        c_ArcId,
                        c_Equipment,
                        c_Type,
                        c_Count,
                        c_AvailableCount,
                        c_Cost};
                this.Rows.Add(rowEquipmentRow);
                return rowEquipmentRow;
            }
            
            public EquipmentRow FindByc_ArcIdc_Equipment(long c_ArcId, string c_Equipment) {
                return ((EquipmentRow)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_Equipment})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EquipmentDataTable cln = ((EquipmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EquipmentDataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_Equipment = this.Columns["c_Equipment"];
                this.columnc_Type = this.Columns["c_Type"];
                this.columnc_Count = this.Columns["c_Count"];
                this.columnc_AvailableCount = this.Columns["c_AvailableCount"];
                this.columnc_Cost = this.Columns["c_Cost"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_Equipment = new DataColumn("c_Equipment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Equipment);
                this.columnc_Type = new DataColumn("c_Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Type);
                this.columnc_Count = new DataColumn("c_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Count);
                this.columnc_AvailableCount = new DataColumn("c_AvailableCount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_AvailableCount);
                this.columnc_Cost = new DataColumn("c_Cost", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Cost);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey20", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_Equipment}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_Equipment.AllowDBNull = false;
            }
            
            public EquipmentRow NewEquipmentRow() {
                return ((EquipmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EquipmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EquipmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EquipmentRowChanged != null)) {
                    this.EquipmentRowChanged(this, new EquipmentRowChangeEvent(((EquipmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EquipmentRowChanging != null)) {
                    this.EquipmentRowChanging(this, new EquipmentRowChangeEvent(((EquipmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EquipmentRowDeleted != null)) {
                    this.EquipmentRowDeleted(this, new EquipmentRowChangeEvent(((EquipmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EquipmentRowDeleting != null)) {
                    this.EquipmentRowDeleting(this, new EquipmentRowChangeEvent(((EquipmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEquipmentRow(EquipmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquipmentRow : DataRow {
            
            private EquipmentDataTable tableEquipment;
            
            internal EquipmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEquipment = ((EquipmentDataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEquipment.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEquipment.c_ArcIdColumn] = value;
                }
            }
            
            public string c_Equipment {
                get {
                    return ((string)(this[this.tableEquipment.c_EquipmentColumn]));
                }
                set {
                    this[this.tableEquipment.c_EquipmentColumn] = value;
                }
            }
            
            public string c_Type {
                get {
                    try {
                        return ((string)(this[this.tableEquipment.c_TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEquipment.c_TypeColumn] = value;
                }
            }
            
            public int c_Count {
                get {
                    try {
                        return ((int)(this[this.tableEquipment.c_CountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEquipment.c_CountColumn] = value;
                }
            }
            
            public int c_AvailableCount {
                get {
                    try {
                        return ((int)(this[this.tableEquipment.c_AvailableCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEquipment.c_AvailableCountColumn] = value;
                }
            }
            
            public System.Decimal c_Cost {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableEquipment.c_CostColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEquipment.c_CostColumn] = value;
                }
            }
            
            public bool Isc_TypeNull() {
                return this.IsNull(this.tableEquipment.c_TypeColumn);
            }
            
            public void Setc_TypeNull() {
                this[this.tableEquipment.c_TypeColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CountNull() {
                return this.IsNull(this.tableEquipment.c_CountColumn);
            }
            
            public void Setc_CountNull() {
                this[this.tableEquipment.c_CountColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_AvailableCountNull() {
                return this.IsNull(this.tableEquipment.c_AvailableCountColumn);
            }
            
            public void Setc_AvailableCountNull() {
                this[this.tableEquipment.c_AvailableCountColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CostNull() {
                return this.IsNull(this.tableEquipment.c_CostColumn);
            }
            
            public void Setc_CostNull() {
                this[this.tableEquipment.c_CostColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquipmentRowChangeEvent : EventArgs {
            
            private EquipmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public EquipmentRowChangeEvent(EquipmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EquipmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HusbandryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_Animals;
            
            private DataColumn columnc_Harvest;
            
            private DataColumn columnc_Field;
            
            private DataColumn columnc_Sheep;
            
            private DataColumn columnc_Goat;
            
            private DataColumn columnc_Cow;
            
            private DataColumn columnc_Horse;
            
            private DataColumn columnc_Camel;
            
            private DataColumn columnc_Pig;
            
            private DataColumn columnc_Bird;
            
            private DataColumn columnc_Seed;
            
            private DataColumn columnc_Vegetable;
            
            private DataColumn columnc_Fruit;
            
            internal HusbandryDataTable() : 
                    base("Husbandry") {
                this.InitClass();
            }
            
            internal HusbandryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_AnimalsColumn {
                get {
                    return this.columnc_Animals;
                }
            }
            
            internal DataColumn c_HarvestColumn {
                get {
                    return this.columnc_Harvest;
                }
            }
            
            internal DataColumn c_FieldColumn {
                get {
                    return this.columnc_Field;
                }
            }
            
            internal DataColumn c_SheepColumn {
                get {
                    return this.columnc_Sheep;
                }
            }
            
            internal DataColumn c_GoatColumn {
                get {
                    return this.columnc_Goat;
                }
            }
            
            internal DataColumn c_CowColumn {
                get {
                    return this.columnc_Cow;
                }
            }
            
            internal DataColumn c_HorseColumn {
                get {
                    return this.columnc_Horse;
                }
            }
            
            internal DataColumn c_CamelColumn {
                get {
                    return this.columnc_Camel;
                }
            }
            
            internal DataColumn c_PigColumn {
                get {
                    return this.columnc_Pig;
                }
            }
            
            internal DataColumn c_BirdColumn {
                get {
                    return this.columnc_Bird;
                }
            }
            
            internal DataColumn c_SeedColumn {
                get {
                    return this.columnc_Seed;
                }
            }
            
            internal DataColumn c_VegetableColumn {
                get {
                    return this.columnc_Vegetable;
                }
            }
            
            internal DataColumn c_FruitColumn {
                get {
                    return this.columnc_Fruit;
                }
            }
            
            public HusbandryRow this[int index] {
                get {
                    return ((HusbandryRow)(this.Rows[index]));
                }
            }
            
            public event HusbandryRowChangeEventHandler HusbandryRowChanged;
            
            public event HusbandryRowChangeEventHandler HusbandryRowChanging;
            
            public event HusbandryRowChangeEventHandler HusbandryRowDeleted;
            
            public event HusbandryRowChangeEventHandler HusbandryRowDeleting;
            
            public void AddHusbandryRow(HusbandryRow row) {
                this.Rows.Add(row);
            }
            
            public HusbandryRow AddHusbandryRow(long c_ArcId, int c_Animals, int c_Harvest, System.Single c_Field, int c_Sheep, int c_Goat, int c_Cow, int c_Horse, int c_Camel, int c_Pig, int c_Bird, int c_Seed, int c_Vegetable, int c_Fruit) {
                HusbandryRow rowHusbandryRow = ((HusbandryRow)(this.NewRow()));
                rowHusbandryRow.ItemArray = new object[] {
                        c_ArcId,
                        c_Animals,
                        c_Harvest,
                        c_Field,
                        c_Sheep,
                        c_Goat,
                        c_Cow,
                        c_Horse,
                        c_Camel,
                        c_Pig,
                        c_Bird,
                        c_Seed,
                        c_Vegetable,
                        c_Fruit};
                this.Rows.Add(rowHusbandryRow);
                return rowHusbandryRow;
            }
            
            public HusbandryRow FindByc_ArcId(long c_ArcId) {
                return ((HusbandryRow)(this.Rows.Find(new object[] {
                            c_ArcId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HusbandryDataTable cln = ((HusbandryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HusbandryDataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_Animals = this.Columns["c_Animals"];
                this.columnc_Harvest = this.Columns["c_Harvest"];
                this.columnc_Field = this.Columns["c_Field"];
                this.columnc_Sheep = this.Columns["c_Sheep"];
                this.columnc_Goat = this.Columns["c_Goat"];
                this.columnc_Cow = this.Columns["c_Cow"];
                this.columnc_Horse = this.Columns["c_Horse"];
                this.columnc_Camel = this.Columns["c_Camel"];
                this.columnc_Pig = this.Columns["c_Pig"];
                this.columnc_Bird = this.Columns["c_Bird"];
                this.columnc_Seed = this.Columns["c_Seed"];
                this.columnc_Vegetable = this.Columns["c_Vegetable"];
                this.columnc_Fruit = this.Columns["c_Fruit"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_Animals = new DataColumn("c_Animals", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Animals);
                this.columnc_Harvest = new DataColumn("c_Harvest", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Harvest);
                this.columnc_Field = new DataColumn("c_Field", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Field);
                this.columnc_Sheep = new DataColumn("c_Sheep", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Sheep);
                this.columnc_Goat = new DataColumn("c_Goat", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Goat);
                this.columnc_Cow = new DataColumn("c_Cow", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Cow);
                this.columnc_Horse = new DataColumn("c_Horse", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Horse);
                this.columnc_Camel = new DataColumn("c_Camel", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Camel);
                this.columnc_Pig = new DataColumn("c_Pig", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Pig);
                this.columnc_Bird = new DataColumn("c_Bird", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Bird);
                this.columnc_Seed = new DataColumn("c_Seed", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Seed);
                this.columnc_Vegetable = new DataColumn("c_Vegetable", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Vegetable);
                this.columnc_Fruit = new DataColumn("c_Fruit", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Fruit);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey21", new DataColumn[] {
                                this.columnc_ArcId}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_ArcId.Unique = true;
            }
            
            public HusbandryRow NewHusbandryRow() {
                return ((HusbandryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HusbandryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HusbandryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HusbandryRowChanged != null)) {
                    this.HusbandryRowChanged(this, new HusbandryRowChangeEvent(((HusbandryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HusbandryRowChanging != null)) {
                    this.HusbandryRowChanging(this, new HusbandryRowChangeEvent(((HusbandryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HusbandryRowDeleted != null)) {
                    this.HusbandryRowDeleted(this, new HusbandryRowChangeEvent(((HusbandryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HusbandryRowDeleting != null)) {
                    this.HusbandryRowDeleting(this, new HusbandryRowChangeEvent(((HusbandryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHusbandryRow(HusbandryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HusbandryRow : DataRow {
            
            private HusbandryDataTable tableHusbandry;
            
            internal HusbandryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHusbandry = ((HusbandryDataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableHusbandry.c_ArcIdColumn]));
                }
                set {
                    this[this.tableHusbandry.c_ArcIdColumn] = value;
                }
            }
            
            public int c_Animals {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_AnimalsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_AnimalsColumn] = value;
                }
            }
            
            public int c_Harvest {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_HarvestColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_HarvestColumn] = value;
                }
            }
            
            public System.Single c_Field {
                get {
                    try {
                        return ((System.Single)(this[this.tableHusbandry.c_FieldColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_FieldColumn] = value;
                }
            }
            
            public int c_Sheep {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_SheepColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_SheepColumn] = value;
                }
            }
            
            public int c_Goat {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_GoatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_GoatColumn] = value;
                }
            }
            
            public int c_Cow {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_CowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_CowColumn] = value;
                }
            }
            
            public int c_Horse {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_HorseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_HorseColumn] = value;
                }
            }
            
            public int c_Camel {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_CamelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_CamelColumn] = value;
                }
            }
            
            public int c_Pig {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_PigColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_PigColumn] = value;
                }
            }
            
            public int c_Bird {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_BirdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_BirdColumn] = value;
                }
            }
            
            public int c_Seed {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_SeedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_SeedColumn] = value;
                }
            }
            
            public int c_Vegetable {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_VegetableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_VegetableColumn] = value;
                }
            }
            
            public int c_Fruit {
                get {
                    try {
                        return ((int)(this[this.tableHusbandry.c_FruitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHusbandry.c_FruitColumn] = value;
                }
            }
            
            public bool Isc_AnimalsNull() {
                return this.IsNull(this.tableHusbandry.c_AnimalsColumn);
            }
            
            public void Setc_AnimalsNull() {
                this[this.tableHusbandry.c_AnimalsColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_HarvestNull() {
                return this.IsNull(this.tableHusbandry.c_HarvestColumn);
            }
            
            public void Setc_HarvestNull() {
                this[this.tableHusbandry.c_HarvestColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_FieldNull() {
                return this.IsNull(this.tableHusbandry.c_FieldColumn);
            }
            
            public void Setc_FieldNull() {
                this[this.tableHusbandry.c_FieldColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_SheepNull() {
                return this.IsNull(this.tableHusbandry.c_SheepColumn);
            }
            
            public void Setc_SheepNull() {
                this[this.tableHusbandry.c_SheepColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_GoatNull() {
                return this.IsNull(this.tableHusbandry.c_GoatColumn);
            }
            
            public void Setc_GoatNull() {
                this[this.tableHusbandry.c_GoatColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CowNull() {
                return this.IsNull(this.tableHusbandry.c_CowColumn);
            }
            
            public void Setc_CowNull() {
                this[this.tableHusbandry.c_CowColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_HorseNull() {
                return this.IsNull(this.tableHusbandry.c_HorseColumn);
            }
            
            public void Setc_HorseNull() {
                this[this.tableHusbandry.c_HorseColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_CamelNull() {
                return this.IsNull(this.tableHusbandry.c_CamelColumn);
            }
            
            public void Setc_CamelNull() {
                this[this.tableHusbandry.c_CamelColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_PigNull() {
                return this.IsNull(this.tableHusbandry.c_PigColumn);
            }
            
            public void Setc_PigNull() {
                this[this.tableHusbandry.c_PigColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_BirdNull() {
                return this.IsNull(this.tableHusbandry.c_BirdColumn);
            }
            
            public void Setc_BirdNull() {
                this[this.tableHusbandry.c_BirdColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_SeedNull() {
                return this.IsNull(this.tableHusbandry.c_SeedColumn);
            }
            
            public void Setc_SeedNull() {
                this[this.tableHusbandry.c_SeedColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_VegetableNull() {
                return this.IsNull(this.tableHusbandry.c_VegetableColumn);
            }
            
            public void Setc_VegetableNull() {
                this[this.tableHusbandry.c_VegetableColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_FruitNull() {
                return this.IsNull(this.tableHusbandry.c_FruitColumn);
            }
            
            public void Setc_FruitNull() {
                this[this.tableHusbandry.c_FruitColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HusbandryRowChangeEvent : EventArgs {
            
            private HusbandryRow eventRow;
            
            private DataRowAction eventAction;
            
            public HusbandryRowChangeEvent(HusbandryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HusbandryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EbsIndDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnc_ArcId;
            
            private DataColumn columnc_Desc;
            
            private DataColumn columnc_Value;
            
            internal EbsIndDataTable() : 
                    base("EbsInd") {
                this.InitClass();
            }
            
            internal EbsIndDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn c_ArcIdColumn {
                get {
                    return this.columnc_ArcId;
                }
            }
            
            internal DataColumn c_DescColumn {
                get {
                    return this.columnc_Desc;
                }
            }
            
            internal DataColumn c_ValueColumn {
                get {
                    return this.columnc_Value;
                }
            }
            
            public EbsIndRow this[int index] {
                get {
                    return ((EbsIndRow)(this.Rows[index]));
                }
            }
            
            public event EbsIndRowChangeEventHandler EbsIndRowChanged;
            
            public event EbsIndRowChangeEventHandler EbsIndRowChanging;
            
            public event EbsIndRowChangeEventHandler EbsIndRowDeleted;
            
            public event EbsIndRowChangeEventHandler EbsIndRowDeleting;
            
            public void AddEbsIndRow(EbsIndRow row) {
                this.Rows.Add(row);
            }
            
            public EbsIndRow AddEbsIndRow(long c_ArcId, string c_Desc, System.Double c_Value) {
                EbsIndRow rowEbsIndRow = ((EbsIndRow)(this.NewRow()));
                rowEbsIndRow.ItemArray = new object[] {
                        c_ArcId,
                        c_Desc,
                        c_Value};
                this.Rows.Add(rowEbsIndRow);
                return rowEbsIndRow;
            }
            
            public EbsIndRow FindByc_ArcIdc_Desc(long c_ArcId, string c_Desc) {
                return ((EbsIndRow)(this.Rows.Find(new object[] {
                            c_ArcId,
                            c_Desc})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EbsIndDataTable cln = ((EbsIndDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EbsIndDataTable();
            }
            
            internal void InitVars() {
                this.columnc_ArcId = this.Columns["c_ArcId"];
                this.columnc_Desc = this.Columns["c_Desc"];
                this.columnc_Value = this.Columns["c_Value"];
            }
            
            private void InitClass() {
                this.columnc_ArcId = new DataColumn("c_ArcId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_ArcId);
                this.columnc_Desc = new DataColumn("c_Desc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Desc);
                this.columnc_Value = new DataColumn("c_Value", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_Value);
                this.Constraints.Add(new UniqueConstraint("DatasetEBSKey22", new DataColumn[] {
                                this.columnc_ArcId,
                                this.columnc_Desc}, true));
                this.columnc_ArcId.AllowDBNull = false;
                this.columnc_Desc.AllowDBNull = false;
            }
            
            public EbsIndRow NewEbsIndRow() {
                return ((EbsIndRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EbsIndRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EbsIndRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EbsIndRowChanged != null)) {
                    this.EbsIndRowChanged(this, new EbsIndRowChangeEvent(((EbsIndRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EbsIndRowChanging != null)) {
                    this.EbsIndRowChanging(this, new EbsIndRowChangeEvent(((EbsIndRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EbsIndRowDeleted != null)) {
                    this.EbsIndRowDeleted(this, new EbsIndRowChangeEvent(((EbsIndRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EbsIndRowDeleting != null)) {
                    this.EbsIndRowDeleting(this, new EbsIndRowChangeEvent(((EbsIndRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEbsIndRow(EbsIndRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EbsIndRow : DataRow {
            
            private EbsIndDataTable tableEbsInd;
            
            internal EbsIndRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEbsInd = ((EbsIndDataTable)(this.Table));
            }
            
            public long c_ArcId {
                get {
                    return ((long)(this[this.tableEbsInd.c_ArcIdColumn]));
                }
                set {
                    this[this.tableEbsInd.c_ArcIdColumn] = value;
                }
            }
            
            public string c_Desc {
                get {
                    return ((string)(this[this.tableEbsInd.c_DescColumn]));
                }
                set {
                    this[this.tableEbsInd.c_DescColumn] = value;
                }
            }
            
            public System.Double c_Value {
                get {
                    try {
                        return ((System.Double)(this[this.tableEbsInd.c_ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEbsInd.c_ValueColumn] = value;
                }
            }
            
            public bool Isc_ValueNull() {
                return this.IsNull(this.tableEbsInd.c_ValueColumn);
            }
            
            public void Setc_ValueNull() {
                this[this.tableEbsInd.c_ValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EbsIndRowChangeEvent : EventArgs {
            
            private EbsIndRow eventRow;
            
            private DataRowAction eventAction;
            
            public EbsIndRowChangeEvent(EbsIndRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EbsIndRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
